//@version=5
strategy("JON - Robust Trading Strategy", 
         shorttitle="JON", 
         overlay=true, 
         margin_long=100, 
         margin_short=100,
         pyramiding=3,
         default_qty_type=strategy.percent_of_equity,
         default_qty_value=100,
         initial_capital=100000,
         currency=currency.USD,
         commission_type=strategy.commission.percent,
         commission_value=0.1)

// ═══════════════════════════════════════════════════════════════════════════════════════════════════
// 📋 STRATEGY INFORMATION
// ═══════════════════════════════════════════════════════════════════════════════════════════════════
// JON Strategy - A robust, multi-asset trading system designed for superior risk-adjusted returns
// 
// Core Philosophy:
// - Automate Everything: Full algorithmic execution without manual intervention
// - Robustness over Optimization: Works across multiple asset classes and market conditions  
// - Sidestep Bear Markets: Preserves capital during major downturns
// - Low-Frequency Investing: High-quality signals, typically <1 trade per month per asset
//
// Primary Assets: BTCUSD, NDX/QQQ, XAUUSD
// Strategy Type: Trend-following with dual entry system and configurable exits
// Risk Management: ATR-based position sizing with hard stops
// 
// Requirements Reference: F-1 to F-5, R-1 to R-4, UI-1 to UI-2, B-1 to B-3
// Development Protocol: 5-step validation process with backtest requirements
//
// ═══════════════════════════════════════════════════════════════════════════════════════════════════
// 📊 VERSION & CHANGELOG
// ═══════════════════════════════════════════════════════════════════════════════════════════════════
// v1.0.0 - Initial template setup with proper headers and structure
// v1.1.0 - Added comprehensive input parameter framework for all PRD requirements
// v1.2.0 - Implemented core indicators with validation (SMA, ATR, reference asset)
// v2.0.0 - Phase 2 Complete: Core Strategy Logic Implementation
// v2.1.0 - Task 2.1: Enhanced trend filter with strength validation
// v2.2.0 - Task 2.2: Signal detection engine for breakouts and dip buys  
// v2.3.0 - Task 2.3: Entry framework with comprehensive condition logic
//
// ═══════════════════════════════════════════════════════════════════════════════════════════════════

// ═══════════════════════════════════════════════════════════════════════════════════════════════════
// 🔧 INPUT PARAMETERS
// ═══════════════════════════════════════════════════════════════════════════════════════════════════

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ F-1: TREND FILTER SETTINGS                                                                         │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘
trendFilterEnabled = input.bool(true, "Enable 200 SMA Trend Filter", group="📈 Trend Filter (F-1)")
trendSmaLength = input.int(200, "Trend SMA Length", minval=50, maxval=500, group="📈 Trend Filter (F-1)")
useReferenceAsset = input.bool(false, "Use Reference Asset Filter", group="📈 Trend Filter (F-1)")
referenceSymbol = input.symbol("CRYPTOCAP:TOTAL", "Reference Asset Symbol", group="📈 Trend Filter (F-1)")

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ F-2: BREAKOUT ENTRY SETTINGS                                                                       │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘
enableBreakoutEntry = input.bool(true, "Enable Breakout Entry", group="🚀 Breakout Entry (F-2)")
breakoutLookback = input.int(20, "Breakout Lookback Period", minval=5, maxval=100, group="🚀 Breakout Entry (F-2)")
breakoutMinAge = input.int(3, "Minimum High Age (bars)", minval=1, maxval=50, group="🚀 Breakout Entry (F-2)")
breakoutMaxAge = input.int(50, "Maximum High Age (bars)", minval=5, maxval=200, group="🚀 Breakout Entry (F-2)")

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ F-3: DIP BUY ENTRY SETTINGS                                                                        │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘
enableDipBuyEntry = input.bool(true, "Enable Dip Buy Entry", group="📉 Dip Buy Entry (F-3)")
dipBuyLookback = input.int(20, "Dip Buy Lookback Period", minval=5, maxval=100, group="📉 Dip Buy Entry (F-3)")
dipRecoveryThreshold = input.float(1.0, "Recovery Threshold %", minval=0.1, maxval=5.0, step=0.1, group="📉 Dip Buy Entry (F-3)")

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ F-4: EXIT STRATEGY SETTINGS                                                                        │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘
exitMode = input.string("ATR Trail", "Exit Strategy Mode", options=["ATR Trail", "Aggressive Profit Take"], group="🎯 Exit Strategy (F-4)")
atrTrailMultiplier = input.float(2.0, "ATR Trail Multiplier", minval=0.5, maxval=5.0, step=0.1, group="🎯 Exit Strategy (F-4)")
aggressiveProfitTarget = input.float(5.0, "Aggressive Profit Target %", minval=1.0, maxval=20.0, step=0.5, group="🎯 Exit Strategy (F-4)")

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ F-5: OPPORTUNISTIC EXIT SETTINGS                                                                   │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘
enableOpportunisticExit = input.bool(true, "Enable Opportunistic Exit", group="⚡ Opportunistic Exit (F-5)")
failedBreakoutBars = input.int(10, "Failed Breakout Timeout (bars)", minval=3, maxval=50, group="⚡ Opportunistic Exit (F-5)")

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ R-1 & R-2: RISK MANAGEMENT SETTINGS                                                                │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘
riskPercent = input.float(1.0, "Risk Per Trade %", minval=0.1, maxval=10.0, step=0.1, group="⚖️ Risk Management (R-1, R-2)")
atrLength = input.int(14, "ATR Length", minval=5, maxval=50, group="⚖️ Risk Management (R-1, R-2)")
stopLossMultiplier = input.float(2.0, "Stop Loss ATR Multiplier", minval=0.5, maxval=5.0, step=0.1, group="⚖️ Risk Management (R-1, R-2)")

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ R-3 & R-4: ADVANCED RISK SETTINGS                                                                  │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘
enableProfitLeverage = input.bool(false, "Enable Profit-Funded Leverage", confirm=true, group="🔧 Advanced Risk (R-3, R-4)")
maxPyramidEntries = input.int(1, "Max Pyramid Entries", minval=1, maxval=3, group="🔧 Advanced Risk (R-3, R-4)")

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ UI-1 & UI-2: DISPLAY SETTINGS                                                                      │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘
showTrendSma = input.bool(true, "Show 200 SMA", group="🎨 Display Settings (UI-1, UI-2)")
showStopLevels = input.bool(true, "Show Stop Loss Levels", group="🎨 Display Settings (UI-1, UI-2)")
showTradeLabels = input.bool(true, "Show Trade Entry/Exit Labels", group="🎨 Display Settings (UI-1, UI-2)")
showDebugInfo = input.bool(false, "Show Debug Information", group="🎨 Display Settings (UI-1, UI-2)")

// ═══════════════════════════════════════════════════════════════════════════════════════════════════
// 📊 CORE INDICATORS
// ═══════════════════════════════════════════════════════════════════════════════════════════════════

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ PRIMARY ASSET INDICATORS                                                                            │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘
// Calculate 200-period SMA for trend filter (F-1)
trendSma = ta.sma(close, trendSmaLength)
isTrendBullish = trendFilterEnabled ? close > trendSma : true

// Calculate ATR for position sizing and stop losses (R-1, R-2)
atr = ta.atr(atrLength)
isAtrValid = not na(atr) and atr > 0

// Basic price validation
isPriceDataValid = not na(close) and not na(high) and not na(low) and not na(open)

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ REFERENCE ASSET INDICATORS (Optional)                                                              │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘
// Get reference asset data with error handling
referenceClose = useReferenceAsset ? request.security(referenceSymbol, timeframe.period, close) : na
referenceSma = useReferenceAsset and not na(referenceClose) ? ta.sma(referenceClose, trendSmaLength) : na
isReferenceValid = useReferenceAsset ? (not na(referenceClose) and not na(referenceSma)) : true
isReferenceBullish = useReferenceAsset and isReferenceValid ? referenceClose > referenceSma : true

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ TREND FILTER VALIDATION (F-1)                                                                      │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘
// Combined trend filter logic - both conditions must be true for long entries
isTrendFilterPassed = isTrendBullish and isReferenceBullish and isReferenceValid

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ INDICATOR VALIDATION                                                                                │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘
// Master validation check - all core indicators must be valid
areIndicatorsValid = isPriceDataValid and isAtrValid and (not useReferenceAsset or isReferenceValid)

// Log any validation issues for debugging
if barstate.islast and showDebugInfo
    debugMsg = "🔍 Indicator Validation:"
    debugMsg := debugMsg + "\n• Price Data: " + (isPriceDataValid ? "✅" : "❌")
    debugMsg := debugMsg + "\n• ATR: " + (isAtrValid ? "✅" : "❌") + " (Value: " + str.tostring(atr, "#.####") + ")"
    debugMsg := debugMsg + "\n• Trend Filter: " + (isTrendBullish ? "✅ Bull" : "❌ Bear")
    if useReferenceAsset
        debugMsg := debugMsg + "\n• Reference Asset: " + (isReferenceValid ? "✅" : "❌")
        debugMsg := debugMsg + "\n• Reference Trend: " + (isReferenceBullish ? "✅ Bull" : "❌ Bear")
    log.info(debugMsg)

// ═══════════════════════════════════════════════════════════════════════════════════════════════════
// 📈 PHASE 2: CORE STRATEGY LOGIC
// ═══════════════════════════════════════════════════════════════════════════════════════════════════

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ TASK 2.1: TREND FILTER SYSTEM (F-1)                                                               │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘
// Enhanced trend filter with reference asset support
// The trend filter is already implemented above in the core indicators section
// Here we add additional trend validation logic for more robust filtering

// Additional trend strength validation
var float trendStrengthHistory = 0.0
trendStrengthScore = close > trendSma ? 1.0 : -1.0
trendStrengthHistory := trendStrengthHistory * 0.9 + trendStrengthScore * 0.1

// Strong trend confirmation (price has been consistently above/below SMA)
isStrongTrend = math.abs(trendStrengthHistory) > 0.3
isTrendConfirmed = isTrendFilterPassed and isStrongTrend

// Log trend filter status for validation
var string trendDebugMsg = ""
if barstate.islast and showDebugInfo
    trendDebugMsg := "🎯 Task 2.1 - Trend Filter Status:"
    trendDebugMsg := trendDebugMsg + "\n• Primary Trend: " + (isTrendBullish ? "BULL 🟢" : "BEAR 🔴")
    trendDebugMsg := trendDebugMsg + "\n• Reference Trend: " + (isReferenceBullish ? "BULL 🟢" : "BEAR 🔴")
    trendDebugMsg := trendDebugMsg + "\n• Combined Filter: " + (isTrendFilterPassed ? "PASS ✅" : "FAIL ❌")
    trendDebugMsg := trendDebugMsg + "\n• Trend Strength: " + str.tostring(trendStrengthHistory, "#.##")
    trendDebugMsg := trendDebugMsg + "\n• Strong Trend: " + (isStrongTrend ? "YES ✅" : "NO ❌")
    log.info(trendDebugMsg)

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ TASK 2.2: SIGNAL DETECTION ENGINE - Recent High/Low Identification                                │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘

// Recent Highs Detection for Breakout Entry (F-2)
recentHigh = ta.highest(high, breakoutLookback)
recentHighAge = ta.barssince(high == recentHigh)
isRecentHighValid = recentHighAge >= breakoutMinAge and recentHighAge <= breakoutMaxAge

// Find the actual recent high value and age for signal validation
var float validRecentHigh = 0.0
var int validRecentHighAge = 0
if high == recentHigh and barstate.isconfirmed
    validRecentHigh := high
    validRecentHighAge := 0
else if validRecentHighAge < breakoutMaxAge
    validRecentHighAge := validRecentHighAge + 1

// Recent Lows Detection for Dip Buy Entry (F-3)  
recentLow = ta.lowest(low, dipBuyLookback)
recentLowAge = ta.barssince(low == recentLow)
isDipRecovering = close > recentLow * (1 + dipRecoveryThreshold / 100)

// Find the actual recent low for dip buy validation
var float validRecentLow = 0.0
var int validRecentLowAge = 0
if low == recentLow and barstate.isconfirmed
    validRecentLow := low
    validRecentLowAge := 0
else if validRecentLowAge < dipBuyLookback
    validRecentLowAge := validRecentLowAge + 1

// Signal quality assessment
breakoutSignalQuality = isRecentHighValid and high > validRecentHigh
dipBuySignalQuality = isDipRecovering and validRecentLowAge >= 3 and validRecentLowAge <= dipBuyLookback

// Log signal detection status for validation
var string signalDebugMsg = ""
if barstate.islast and showDebugInfo
    signalDebugMsg := "🔍 Task 2.2 - Signal Detection Status:"
    signalDebugMsg := signalDebugMsg + "\n• Recent High: " + str.tostring(validRecentHigh, "#.##") + " (Age: " + str.tostring(validRecentHighAge) + ")"
    signalDebugMsg := signalDebugMsg + "\n• High Valid: " + (isRecentHighValid ? "YES ✅" : "NO ❌")
    signalDebugMsg := signalDebugMsg + "\n• Breakout Signal: " + (breakoutSignalQuality ? "STRONG 🟢" : "WEAK 🔴")
    signalDebugMsg := signalDebugMsg + "\n• Recent Low: " + str.tostring(validRecentLow, "#.##") + " (Age: " + str.tostring(validRecentLowAge) + ")"
    signalDebugMsg := signalDebugMsg + "\n• Dip Recovery: " + (isDipRecovering ? "YES ✅" : "NO ❌")
    signalDebugMsg := signalDebugMsg + "\n• Dip Buy Signal: " + (dipBuySignalQuality ? "STRONG 🟢" : "WEAK 🔴")
    log.info(signalDebugMsg)

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ TASK 2.3: ENTRY FRAMEWORK - Basic Entry Conditions (No Execution Yet)                            │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘

// Breakout Entry Conditions (F-2)
breakoutEntryCondition = enableBreakoutEntry and 
                        isTrendConfirmed and 
                        areIndicatorsValid and
                        breakoutSignalQuality and
                        close > validRecentHigh and
                        volume > ta.sma(volume, 20) // Add volume confirmation

// Dip Buy Entry Conditions (F-3)
dipBuyEntryCondition = enableDipBuyEntry and 
                      isTrendConfirmed and 
                      areIndicatorsValid and
                      dipBuySignalQuality and
                      isDipRecovering and
                      validRecentLowAge >= 3

// Combined entry signal (either breakout or dip buy, but not both simultaneously)
anyEntryCondition = (breakoutEntryCondition or dipBuyEntryCondition) and strategy.position_size == 0

// Entry type tracking for different logic paths
entryType = breakoutEntryCondition ? "BREAKOUT" : dipBuyEntryCondition ? "DIP_BUY" : "NONE"

// Log entry framework status for validation
var string entryDebugMsg = ""
if barstate.islast and showDebugInfo
    entryDebugMsg := "🚀 Task 2.3 - Entry Framework Status:"
    entryDebugMsg := entryDebugMsg + "\n• Breakout Entry: " + (breakoutEntryCondition ? "READY 🟢" : "NOT READY 🔴")
    entryDebugMsg := entryDebugMsg + "\n• Dip Buy Entry: " + (dipBuyEntryCondition ? "READY 🟢" : "NOT READY 🔴")
    entryDebugMsg := entryDebugMsg + "\n• Any Entry Signal: " + (anyEntryCondition ? "YES ✅" : "NO ❌")
    entryDebugMsg := entryDebugMsg + "\n• Entry Type: " + entryType
    entryDebugMsg := entryDebugMsg + "\n• Position Size: " + str.tostring(strategy.position_size)
    log.info(entryDebugMsg)

// Visual indicators for entry signals (for validation purposes only)
plotshape(breakoutEntryCondition, "Breakout Signal", shape.triangleup, location.belowbar, color.lime, size=size.small)
plotshape(dipBuyEntryCondition, "Dip Buy Signal", shape.circle, location.belowbar, color.blue, size=size.small)

// Phase 2 completion status tracking
isPhase2Complete = true // All three tasks implemented

// ═══════════════════════════════════════════════════════════════════════════════════════════════════
// 📉 EXIT LOGIC (Phase 4 - Future implementation)
// ═══════════════════════════════════════════════════════════════════════════════════════════════════

// ═══════════════════════════════════════════════════════════════════════════════════════════════════
// ⚖️ RISK MANAGEMENT (Phase 3 - Future implementation)
// ═══════════════════════════════════════════════════════════════════════════════════════════════════

// ═══════════════════════════════════════════════════════════════════════════════════════════════════
// 🎨 USER INTERFACE & VISUALIZATION (Phase 6 - Future implementation)
// ═══════════════════════════════════════════════════════════════════════════════════════════════════

// ┌─────────────────────────────────────────────────────────────────────────────────────────────────┐
// │ BASIC TREND VISUALIZATION (Phase 1.3)                                                              │
// └─────────────────────────────────────────────────────────────────────────────────────────────────┘
// Plot 200 SMA trend line
trendColor = isTrendBullish ? color.new(color.green, 20) : color.new(color.red, 20)
plot(showTrendSma ? trendSma : na, "200 SMA Trend Filter", color=trendColor, linewidth=2)

// Phase 2 status reporting
if barstate.islast
    statusMsg = "📊 JON Strategy - Phase 2 Complete ✅"
    statusMsg := statusMsg + "\n╔══ PHASE 1 FOUNDATION ══╗"
    statusMsg := statusMsg + "\n• Task 1.1: Project Setup ✅"
    statusMsg := statusMsg + "\n• Task 1.2: Input Parameters ✅" 
    statusMsg := statusMsg + "\n• Task 1.3: Core Indicators ✅"
    statusMsg := statusMsg + "\n╔══ PHASE 2 CORE LOGIC ══╗"
    statusMsg := statusMsg + "\n• Task 2.1: Trend Filter System ✅"
    statusMsg := statusMsg + "\n• Task 2.2: Signal Detection Engine ✅"
    statusMsg := statusMsg + "\n• Task 2.3: Entry Framework ✅"
    statusMsg := statusMsg + "\n╔══ CURRENT STATUS ══╗"
    statusMsg := statusMsg + "\n• Trend Filter: " + (isTrendConfirmed ? "STRONG BULL 🟢" : "WEAK/BEAR 🔴")
    statusMsg := statusMsg + "\n• ATR: " + str.tostring(atr, "#.####")
    statusMsg := statusMsg + "\n• Data Valid: " + (areIndicatorsValid ? "✅" : "❌")
    statusMsg := statusMsg + "\n• Entry Signals: " + (anyEntryCondition ? "ACTIVE 🚨" : "WAITING ⏱️")
    statusMsg := statusMsg + "\n• Next Phase: Risk Management (Phase 3)"
    log.info(statusMsg) 