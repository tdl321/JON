// © 2025 JON Systems
//@version=6
strategy("JON",
     shorttitle="JON",
     overlay=true,
     pyramiding=4,
     default_qty_type=strategy.fixed,
     initial_capital=100000,
     currency=currency.USD,
     commission_type=strategy.commission.percent,
     commission_value=0.1)

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                                S T R A T E G Y   I N F O R M A T I O N                       |
// ——————————————————————————————————————————————————————————————————————————————————————————————
// JON MTP BETA v4 Strategy - Universal Higher Timeframe Trend Following System
//
// STRATEGY PHILOSOPHY:
// This strategy prioritizes ROBUSTNESS above all else. 
//
// CORE REQUIREMENTS:
// - REACTIVE ENTRIES: Accept many small losses to maximize chances of catching strong trends
// - EXIT-FOCUSED DESIGN: Entry timing is secondary; exit strategy is the critical component
// - NO TAKE PROFIT: Pure trend following with asymmetric profit targeting
// - ATR-BASED TRAILING STOPS: Let winners run until trend definitively reverses
// - WIDE ASSET COVERAGE: Cast net broadly to increase probability of capturing major bull runs
// - STATISTICS DRIVEN: Relies on probabilities and large sample sizes, not individual trade outcomes
//
// PERFORMANCE FRAMEWORK:
// - Frequent trades with small individual risks
// - Portfolio carried by occasional massive winners (asymmetric returns)
// - Drawdown tolerance HIGH - focused purely on annualized performance
// - Simple core logic with anti-whipsaw flexibility built in
//
// Key Success Factors:
// - Much longer holding periods capture major trends fully
// - Wider stops avoid noise-based exits in volatile markets
// - Reference asset provides macro timing improvement
// - Age validation prevents recency bias and noise
//
// UNIVERSAL COMPATIBILITY:
// - ALL assets: Crypto, indices, futures, metals, forex

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                                  I N P U T   P A R A M E T E R S                           |
// ——————————————————————————————————————————————————————————————————————————————————————————————



// --- F-1: TREND FILTER SETTINGS ---
trendFilterEnabled = input.bool(true, "Enable 100 EMA Trend Filter", group = "Trend Filter (F-1)")
trendEmaLength = input.int(100, "Trend EMA Length", minval = 50, maxval = 500, group = "Trend Filter (F-1)")
trendAtrBuffer = input.float(1.5, "Trend ATR Buffer", minval = 0.0, maxval = 3.0, step = 0.1, group = "Trend Filter (F-1)", tooltip = "Allow entries when price is within X ATR below EMA (0 = strict, 0.5 = moderate, 1.5 = aggressive)")
useReferenceAsset = input.bool(false, "Use Reference Asset Filter", group = "Trend Filter (F-1)")
referenceSymbol = input.symbol("CRYPTOCAP:TOTAL", "Reference Asset Symbol", group = "Trend Filter (F-1)")

// --- F-2: BREAKOUT ENTRY SETTINGS (Monthly HTF System) ---
enableBreakoutEntry = input.bool(true, "Enable Breakout Entry", group = "Breakout Entry (F-2)")
breakoutTimeframe = input.timeframe("1M", "Monthly Timeframe for Breakouts", group = "Breakout Entry (F-2)", tooltip = "Monthly timeframe for major breakout detection")
breakoutLookbackPeriod = input.int(1, "Monthly Lookback Period", minval = 1, maxval = 60, group = "Breakout Entry (F-2)", tooltip = "Months to look back for significant highs (1 = 1 month)")
breakoutCrossWithinDays = input.int(20, "Cross Above Within (days)", minval = 1, maxval = 60, group = "Breakout Entry (F-2)", tooltip = "Must cross above monthly high within this many days")
breakoutMinAgeDays = input.int(20, "Min Age of Monthly High (days)", minval = 7, maxval = 180, group = "Breakout Entry (F-2)", tooltip = "Monthly high must be at least this many days old (20 days)")
breakoutMaxAgeDays = input.int(200, "Max Age of Monthly High (days)", minval = 30, maxval = 1095, group = "Breakout Entry (F-2)", tooltip = "Monthly high must not be older than this many days (200 days)")

// --- F-3: DIP BUY ENTRY SETTINGS (Monthly HTF System) ---
enableDipBuyEntry = input.bool(true, "Enable Dip Buy Entry", group = "Dip Buy Entry (F-3)")
dipTimeframe = input.timeframe("1M", "Monthly Timeframe for Dip Buys", group = "Dip Buy Entry (F-3)", tooltip = "Monthly timeframe for major dip detection")
dipLookbackPeriod = input.int(1, "Monthly Lookback Period", minval = 1, maxval = 60, group = "Dip Buy Entry (F-3)", tooltip = "Months to look back for significant lows (1 = 1 month)")
dipRecoveryWithinDays = input.int(30, "Recovery Within (days)", minval = 7, maxval = 180, group = "Dip Buy Entry (F-3)", tooltip = "Must recover from monthly low within this many days")
dipMinAgeDays = input.int(15, "Min Age of Monthly Low (days)", minval = 7, maxval = 180, group = "Dip Buy Entry (F-3)", tooltip = "Monthly low must be at least this many days old (15 days)")
dipMaxAgeDays = input.int(90, "Max Age of Monthly Low (days)", minval = 21, maxval = 730, group = "Dip Buy Entry (F-3)", tooltip = "Monthly low must not be older than this many days (90 days)")
dipTouchBufferATR = input.float(0.1, "Dip Touch Buffer (ATR multiplier)", minval = 0.05, maxval = 0.5, step = 0.05, group = "Dip Buy Entry (F-3)", tooltip = "Allow touching monthly low within this many ATR below the exact low")
dipRecoveryBufferATR = input.float(0.2, "Recovery Buffer (ATR multiplier)", minval = 0.1, maxval = 1.0, step = 0.1, group = "Dip Buy Entry (F-3)", tooltip = "Must recover this many ATR above monthly low to trigger entry")

// --- F-4: EXIT STRATEGY SETTINGS (HIGH PERFORMANCE) ---
exitMode = input.string("ATR Trail", "Exit Strategy Mode", options = ["ATR Trail"], group = "Exit Strategy (F-4)")
atrTrailMultiplier = input.float(10.0, "Trailing Distance x ATR", minval = 0.5, maxval = 25.0, step = 0.5, group = "Exit Strategy (F-4)")
trailStartProfitMultiplier = input.float(5.0, "Trailing Start at Profit x ATR", minval = 1.0, maxval = 20.0, step = 0.1, group = "Exit Strategy (F-4)")
trailOnTouchHigh = input.bool(true, "Trail Start on Touch High", group = "Exit Strategy (F-4)")
enableDynamicTrail = input.bool(true, "Enable Dynamic Trail Adjustment", group = "Exit Strategy (F-4)")
volatilityLookback = input.int(14, "Volatility Reference Period", minval = 10, maxval = 50, group = "Exit Strategy (F-4)")

// --- R-1 & R-2: RISK MANAGEMENT SETTINGS ---
unitRiskPercent = input.float(5.0, "Risk Per Unit %", minval = 0.1, maxval = 10.0, step = 0.1, group = "Risk Management (R-1, R-2)")
maxTradeRiskPercent = input.float(25.0, "Max Total Trade Risk %", minval = 1.0, maxval = 50.0, step = 0.1, group = "Risk Management (R-1, R-2)")
atrLength = input.int(50, "ATR Length", minval = 5, maxval = 100, group = "Risk Management (R-1, R-2)")
stopLossMultiplier = input.float(5.0, "Initial Stop Loss x ATR", minval = 0.5, maxval = 10.0, step = 0.1, group = "Risk Management (R-1, R-2)")
correlateUnit1 = input.bool(true, "Correlate Unit 1 Entry", group = "Risk Management (R-1, R-2)")
correlateAdditionalUnits = input.bool(true, "Correlate Additional Units", group = "Risk Management (R-1, R-2)")
correlateUnit1TrailSL = input.bool(true, "Correlate Unit 1 Trail SL", group = "Risk Management (R-1, R-2)")

// --- R-4: PYRAMIDING ENGINE SETTINGS ---
enablePyramiding = input.bool(true, "Enable Unit Pyramiding", group = "Pyramiding Engine (R-4)")
maxPyramidEntries = input.int(4, "Max Additional Units (Total: 5)", minval = 1, maxval = 4, group = "Pyramiding Engine (R-4)")
pyramidSpacingATR = input.float(1.0, "Unit Spacing (ATR multiplier)", minval = 0.5, maxval = 2.0, step = 0.5, group = "Pyramiding Engine (R-4)")
trailSLOnPyramiding = input.bool(true, "Trail SL on Unit Additions", group = "Pyramiding Engine (R-4)")

// --- UI: DISPLAY SETTINGS ---
showTrendEma = input.bool(true, "Show 100 EMA", group = "Display Settings")
showStopLevels = input.bool(true, "Show Stop Loss Levels", group = "Display Settings")
showEntryArrows = input.bool(true, "Show Entry Arrows", group = "Display Settings")
showExitArrows = input.bool(true, "Show Exit Arrows", group = "Display Settings")
arrowSize = "Small"
showProfitZone = input.bool(false, "Show Profit Zone", group = "Display Settings")
showRiskZone = input.bool(false, "Show Risk Zone", group = "Display Settings")
showStopLossLine = input.bool(true, "Show Stop Loss Line", group = "Display Settings")
// showStopLossLine input removed - static stop-loss line deprecated
showHistoricalZones = input.bool(true, "Show Historical Zones", group = "Display Settings")
zoneTransparency = input.int(85, "Zone Transparency", minval = 80, maxval = 95, group = "Display Settings")
maxHistoricalZones = input.int(50, "Max Historical Zones", minval = 10, maxval = 100, group = "Display Settings")
showDebugInfo = input.bool(false, "Show Debug Info", group = "Display Settings")
// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                                  C O R E   I N D I C A T O R S                             |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// Basic indicators with EXTENDED ATR period (KEY DIFFERENCE) - using native chart data
atr = ta.atr(atrLength)  // 50-period ATR for stability
trendEma = ta.ema(close, trendEmaLength)

// Reference asset data for correlation (KEY FEATURE) - using chart timeframe
referenceClose = useReferenceAsset ? request.security(referenceSymbol, timeframe.period, close, lookahead=barmerge.lookahead_off) : na
referenceEma = useReferenceAsset and not na(referenceClose) ? request.security(referenceSymbol, timeframe.period, ta.ema(close, trendEmaLength), lookahead=barmerge.lookahead_off) : na

// Trend filter with ATR buffer and reference asset correlation - using native chart data
trendFilterLevel = trendEma - (atr * trendAtrBuffer)
isTrendBullish = not trendFilterEnabled or close > trendFilterLevel
isReferenceBullish = not useReferenceAsset or (not na(referenceClose) and not na(referenceEma) and referenceClose > referenceEma)
isTrendFilterPassed = isTrendBullish and isReferenceBullish

// TRUE HTF DATA - Real higher timeframe breakout and dip levels
htfBreakoutHigh = request.security(syminfo.tickerid, breakoutTimeframe, ta.highest(high, breakoutLookbackPeriod), lookahead=barmerge.lookahead_off)
htfDipLow = request.security(syminfo.tickerid, dipTimeframe, ta.lowest(low, dipLookbackPeriod), lookahead=barmerge.lookahead_off)

// HTF time tracking for age validation (using HTF bar index for proper timing)
htfBreakoutTime = request.security(syminfo.tickerid, breakoutTimeframe, time, lookahead=barmerge.lookahead_off)
htfDipTime = request.security(syminfo.tickerid, dipTimeframe, time, lookahead=barmerge.lookahead_off)

// Track HTF level changes for age validation
var float lastHTFHigh = na
var float lastHTFLow = na
var int htfHighChangeTime = na
var int htfLowChangeTime = na

// Detect when HTF levels change (new highs/lows formed)
if not na(htfBreakoutHigh) and (na(lastHTFHigh) or htfBreakoutHigh != lastHTFHigh)
    lastHTFHigh := htfBreakoutHigh
    htfHighChangeTime := time

if not na(htfDipLow) and (na(lastHTFLow) or htfDipLow != lastHTFLow)
    lastHTFLow := htfDipLow
    htfLowChangeTime := time

// Data validation constants
contractDataValid = true

// Historical data sufficiency check (timeframe-aware)
maxLookbackRequired = math.max(trendEmaLength, atrLength, volatilityLookback)
historicalDataSufficient = bar_index >= maxLookbackRequired

// ROBUSTNESS FIX #3: Enhanced data validation with TRUE HTF validation
basicDataValid = not na(close) and not na(high) and not na(low) and close > 0 and high > 0 and low > 0 and high >= low and high >= close and low <= close
atrDataValid = not na(atr) and atr > 0 and bar_index >= atrLength
trendDataValid = not na(trendEma) and trendEma > 0 and bar_index >= trendEmaLength
referenceDataValid = not useReferenceAsset or (not na(referenceClose) and not na(referenceEma) and referenceClose > 0)

// HTF data validation - all HTF components must be valid
htfBreakoutDataValid = not na(htfBreakoutHigh) and htfBreakoutHigh > 0 and not na(htfBreakoutTime)
htfDipDataValid = not na(htfDipLow) and htfDipLow > 0 and not na(htfDipTime)
htfTimingDataValid = not na(htfHighChangeTime) and not na(htfLowChangeTime)
htfDataValid = htfBreakoutDataValid and htfDipDataValid and htfTimingDataValid and htfBreakoutHigh > htfDipLow

mathSafetyValid = atr > 0 and close > 0 and strategy.equity > 0
isDataValid = basicDataValid and atrDataValid and trendDataValid and referenceDataValid and htfDataValid and historicalDataSufficient and contractDataValid and mathSafetyValid

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                                E N T R Y   T R I G G E R S                                 |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// TRUE HTF-based entry system with proper time-based age validation

// Variables to track current timeframe entry timing
var int crossAboveHTFTime = na
var int touchHTFLowTime = na

// Constants for time calculations  
MILLISECONDS_PER_DAY = 86400000

// Track when we first cross above HTF breakout high on current timeframe
if not na(htfBreakoutHigh) and close > htfBreakoutHigh and (na(crossAboveHTFTime) or close[1] <= htfBreakoutHigh)
    crossAboveHTFTime := time

// Track when we first touch HTF dip low with ATR-based buffer
htfLowWithBuffer = not na(htfDipLow) and not na(atr) ? htfDipLow + (atr * dipTouchBufferATR) : na
if not na(htfLowWithBuffer) and low <= htfLowWithBuffer and na(touchHTFLowTime)
    touchHTFLowTime := time

// Calculate ages in days using PROPER HTF timing data
htfHighAgeDays = not na(htfHighChangeTime) ? math.round((time - htfHighChangeTime) / MILLISECONDS_PER_DAY) : na
htfLowAgeDays = not na(htfLowChangeTime) ? math.round((time - htfLowChangeTime) / MILLISECONDS_PER_DAY) : na
daysSinceCrossAbove = not na(crossAboveHTFTime) ? math.round((time - crossAboveHTFTime) / MILLISECONDS_PER_DAY) : na
daysSinceTouch = not na(touchHTFLowTime) ? math.round((time - touchHTFLowTime) / MILLISECONDS_PER_DAY) : na

// F-2: BREAKOUT ENTRY LOGIC (HTF breakout with age and timing validation)
basicBreakoutTrigger = enableBreakoutEntry and not na(htfBreakoutHigh) and close > htfBreakoutHigh
ageValidBreakout = na(htfHighAgeDays) or (htfHighAgeDays >= breakoutMinAgeDays and htfHighAgeDays <= breakoutMaxAgeDays)
crossWithinTimeframe = na(daysSinceCrossAbove) or daysSinceCrossAbove <= breakoutCrossWithinDays
breakoutTrigger = basicBreakoutTrigger and ageValidBreakout and crossWithinTimeframe

// F-3: DIP BUY ENTRY LOGIC (HTF dip recovery with age and timing validation)
touchedHTFLow = enableDipBuyEntry and not na(htfLowWithBuffer) and low <= htfLowWithBuffer
dipRecoveryLevel = not na(htfDipLow) and not na(atr) ? htfDipLow + (atr * dipRecoveryBufferATR) : na
dipRecoveryTrigger = touchedHTFLow and not na(dipRecoveryLevel) and close > dipRecoveryLevel
ageValidDipBuy = na(htfLowAgeDays) or (htfLowAgeDays >= dipMinAgeDays and htfLowAgeDays <= dipMaxAgeDays)
recoveryWithinTimeframe = na(daysSinceTouch) or daysSinceTouch <= dipRecoveryWithinDays
dipBuyTrigger = dipRecoveryTrigger and ageValidDipBuy and recoveryWithinTimeframe

// PRIORITIZED ENTRY LOGIC - Avoid conflicts, breakout takes priority
entryType = breakoutTrigger and not dipBuyTrigger ? "F2B" : dipBuyTrigger and not breakoutTrigger ? "F3D" : breakoutTrigger and dipBuyTrigger ? "F2B" : na

// Combined entry condition with prioritized logic
entryCondition = contractDataValid and isDataValid and isTrendFilterPassed and not na(entryType)

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                                    R I S K   M A N A G E M E N T                             |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// Position sizing calculation
unitRiskAmountDollars = strategy.equity * (unitRiskPercent / 100.0)

// Dynamic volatility adjustment for trailing stops
avgAtr = ta.sma(atr, volatilityLookback)
volatilityAdjustment = enableDynamicTrail and not na(avgAtr) and avgAtr != 0 and not na(atr) and atr != 0 ? (atr / avgAtr > 1.2 ? 1.3 : atr / avgAtr < 0.8 ? 0.7 : 1.0) : 1.0

// Adjusted trail multiplier with dynamic volatility (WIDE TRAILS)
adjustedAtrTrailMultiplier = atrTrailMultiplier * volatilityAdjustment

// @function Calculate position size based on ATR risk
calculateUnitSize(entryPrice, stopLossPrice) =>
    if na(entryPrice) or na(stopLossPrice) or entryPrice <= 0 or stopLossPrice <= 0 or unitRiskAmountDollars <= 0 or strategy.equity <= 0
        0.0
    else
        // ATR-based position sizing (no percentage fallbacks)
        riskPerShare = math.abs(entryPrice - stopLossPrice)
        if riskPerShare == 0
            0.0
        else
            unitValue = unitRiskAmountDollars / riskPerShare
            // Max position size based on reasonable portfolio allocation (90% equity max)
            maxEquityRisk = strategy.equity * 0.90
            validUnitValue = math.min(unitValue, maxEquityRisk)
            math.floor(validUnitValue)

// @function Calculate ATR-based stop loss
calculateInitialStopLoss(entryPrice) =>
    if na(entryPrice) or entryPrice <= 0 or na(atr) or atr == 0
        na
    else
        entryPrice - (atr * stopLossMultiplier)

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                                    E X I T   S T R A T E G Y                                 |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// Exit tracking variables
var float currentStopPrice = na
var float atrTrailStop = na
var float atrTrailHigh = na
var bool trailStartActivated = false
var float profitActivationLevel = na
var float initialStopPrice = na

// Update exit system with TOUCH HIGH activation mode (MTP KEY FEATURE) - now using baseTF data
if strategy.position_size > 0 and not na(atr)
    entryPrice = strategy.position_avg_price
    currentProfit = close - entryPrice
    profitInATR = atr != 0 ? currentProfit / atr : 0.0
    
    if na(initialStopPrice) and not na(currentStopPrice)
        initialStopPrice := currentStopPrice
    
    if exitMode == "ATR Trail"
        if na(profitActivationLevel)
            profitActivationLevel := entryPrice + (atr * trailStartProfitMultiplier)
        
        // MTP TOUCH HIGH MODE: Start trailing immediately on any new high above entry
        if not trailStartActivated
            if trailOnTouchHigh
                if high > entryPrice
                    trailStartActivated := true
                    atrTrailHigh := high
            else
                if close >= profitActivationLevel
                    trailStartActivated := true
                    atrTrailHigh := close
        
        // Update trailing stop with WIDE 22.5 ATR distance
        if trailStartActivated
            if high > atrTrailHigh
                atrTrailHigh := high
            
            newTrailStop = atrTrailHigh - (atr * adjustedAtrTrailMultiplier)
            
            if na(atrTrailStop)
                atrTrailStop := newTrailStop
            else
                atrTrailStop := math.max(atrTrailStop, newTrailStop)
            
            if correlateUnit1TrailSL
                atrTrailStop := math.max(atrTrailStop, currentStopPrice)
            
            currentStopPrice := math.max(currentStopPrice, atrTrailStop)
else
    currentStopPrice := na
    atrTrailStop := na
    atrTrailHigh := na
    trailStartActivated := false
    profitActivationLevel := na
    initialStopPrice := na

// Exit conditions - now using baseTF data
stopLossHit = strategy.position_size > 0 and not na(currentStopPrice) and low <= currentStopPrice
trendFilterFail = strategy.position_size > 0 and not isTrendFilterPassed
// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                             T R A D E   E X E C U T I O N                                   |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// Pyramiding tracking
var int currentTierCount = 0
var float lastTierPrice = na

// Entry/Exit type tracking for UI labels
var string lastEntryType = na
var string lastExitType = na
var int lastEntryTier = na
var int lastExitTier = na

// Historical zone tracking
var array<box> historicalProfitZones = array.new<box>()
var array<box> historicalRiskZones = array.new<box>()

// Current active trade zone tracking
var box currentProfitZone = na
var box currentRiskZone = na
var int tradeStartBar = na
var float tradeEntryPrice = na
var float tradeExitPrice = na

// Entry execution with TRUE HTF data validation - robust across timeframes and assets
if strategy.position_size == 0 and entryCondition and not na(atr) and atr != 0 and contractDataValid
    initialStop = calculateInitialStopLoss(close)
    if not na(initialStop) and initialStop < close
        unitSize = calculateUnitSize(close, initialStop)
        if unitSize > 0
            entryId = "T1-" + entryType  // Use prioritized entry type
            
            strategy.entry(entryId, strategy.long, qty=unitSize)
            currentStopPrice := initialStop
            currentTierCount := 0
            lastTierPrice := na
            
            lastEntryType := entryType
            lastEntryTier := 1

// Initialize trade tracking for zones
if strategy.position_size > 0 and strategy.position_size[1] == 0
    tradeStartBar := bar_index
    tradeEntryPrice := strategy.position_avg_price// Pyramiding execution with correlation logic - now timeframe-robust
if enablePyramiding and strategy.position_size > 0 and currentTierCount < maxPyramidEntries and not na(atr) and atr != 0
    entryPrice = strategy.position_avg_price
    profitInN = atr != 0 ? (close - entryPrice) / atr : 0.0
    
    nextTierThreshold = (currentTierCount + 1) * pyramidSpacingATR
    
    atrThresholdMet = profitInN >= nextTierThreshold
    priceDistanceOk = na(lastTierPrice) or math.abs(close - lastTierPrice) >= (atr * pyramidSpacingATR)
    pyramidCondition = atrThresholdMet and priceDistanceOk
    
    currentTradeRisk = strategy.equity > 0 ? (strategy.position_size * math.abs(strategy.position_avg_price - currentStopPrice) / strategy.equity * 100) : 100.0
    wouldExceedMaxRisk = currentTradeRisk + unitRiskPercent > maxTradeRiskPercent
    
    if pyramidCondition and not wouldExceedMaxRisk
        tierStopPrice = calculateInitialStopLoss(close)
        
        if correlateAdditionalUnits
            tierStopPrice := math.max(tierStopPrice, currentStopPrice)
        
        tierSize = calculateUnitSize(close, tierStopPrice)
        
        if tierSize > 0
            tierNumber = currentTierCount + 2
            tierId = "T" + str.tostring(tierNumber) + "-" + entryType  // Use current entry type
            
            strategy.entry(tierId, strategy.long, qty=tierSize)
            currentTierCount := currentTierCount + 1
            lastTierPrice := close
            
            lastEntryType := entryType
            lastEntryTier := tierNumber
            
            if correlateAdditionalUnits
                currentStopPrice := math.max(currentStopPrice, tierStopPrice)
            else
                currentStopPrice := tierStopPrice
            
            if trailSLOnPyramiding and trailStartActivated
                newTrailStop = atrTrailHigh - (atr * adjustedAtrTrailMultiplier)
                atrTrailStop := math.max(atrTrailStop, newTrailStop)
                currentStopPrice := math.max(currentStopPrice, atrTrailStop)

// Exit execution
if stopLossHit
    lastExitType := "F4E"
    lastExitTier := currentTierCount + 1
    exitComment = "T" + str.tostring(lastExitTier) + "-F4E"
    strategy.close_all(comment=exitComment)
else if trendFilterFail
    lastExitType := "F1E"
    lastExitTier := currentTierCount + 1
    exitComment = "T" + str.tostring(lastExitTier) + "-F1E"
    strategy.close_all(comment=exitComment)

// Reset tracking on position close
if strategy.position_size == 0
    currentTierCount := 0
    lastTierPrice := na
    if strategy.position_size[1] > 0
        lastEntryType := na
        lastEntryTier := na
        lastExitType := na
        lastExitTier := na
// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                H I S T O R I C A L   Z O N E   M A N A G E M E N T                          |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// Zone colors with user-configurable transparency
PROFIT_ZONE_COLOR = color.new(color.green, zoneTransparency)
RISK_ZONE_COLOR = color.new(color.red, zoneTransparency)
DARK_RED_LINE = color.new(color.red, 0)

// Historical zone constants
MAX_ZONES = maxHistoricalZones

// Zone array memory management (moved to main scope per Pine Script v6 requirements)
if array.size(historicalProfitZones) > MAX_ZONES
    oldBox = array.shift(historicalProfitZones)
    if not na(oldBox)
        box.delete(oldBox)

if array.size(historicalRiskZones) > MAX_ZONES
    oldBox = array.shift(historicalRiskZones)
    if not na(oldBox)
        box.delete(oldBox)

// Zone management for ACTIVE trades (per UI specifications)
if strategy.position_size > 0 and not na(currentStopPrice) and not na(tradeStartBar) and not na(tradeEntryPrice) and currentStopPrice > 0
    if showRiskZone and tradeEntryPrice > currentStopPrice and currentStopPrice > 0 and tradeStartBar <= bar_index
        if na(currentRiskZone)
            currentRiskZone := box.new(left=tradeStartBar, top=tradeEntryPrice, right=bar_index, bottom=currentStopPrice, bgcolor=RISK_ZONE_COLOR, border_color=color.new(color.red, 50), border_width=1, extend=extend.none)
        else
            box.set_right(currentRiskZone, bar_index)
            box.set_bottom(currentRiskZone, currentStopPrice)

// Handle trade EXIT - finalize zones and preserve them historically
if strategy.position_size == 0 and strategy.position_size[1] > 0
    tradeExitPrice := close
    
    if showHistoricalZones
        if not na(currentProfitZone) and showProfitZone
            box.set_right(currentProfitZone, bar_index)
            array.push(historicalProfitZones, currentProfitZone)
            currentProfitZone := na
        
        if not na(currentRiskZone) and showRiskZone
            box.set_right(currentRiskZone, bar_index)
            array.push(historicalRiskZones, currentRiskZone)
            currentRiskZone := na
    
    if not showHistoricalZones
        if not na(currentProfitZone)
            box.delete(currentProfitZone)
            currentProfitZone := na
        if not na(currentRiskZone)
            box.delete(currentRiskZone)
            currentRiskZone := na
    
    tradeStartBar := na
    tradeEntryPrice := na

// ——————————————————————————————————————————————————————————————————————————————————————————————
// |                                V I S U A L   I N T E R F A C E                             |
// ——————————————————————————————————————————————————————————————————————————————————————————————

// UI Colors
BRIGHT_BLUE = color.new(#0080FF, 0)
BRIGHT_ORANGE = color.new(#FF8000, 0)
PROFESSIONAL_BLUE = color.new(color.blue, 20)
SUBTLE_GREEN = color.new(color.green, 97)// Essential plots
plot(showTrendEma ? trendEma : na, "100 EMA", color=PROFESSIONAL_BLUE, linewidth=1)

// Entry/Exit detection patterns
entryDetected = strategy.position_size > 0 and strategy.position_size[1] == 0
exitDetected = strategy.position_size == 0 and strategy.position_size[1] > 0

// Entry/Exit arrows
plotshape(showEntryArrows and entryDetected, "Entry Arrow", shape.arrowup, location.belowbar, BRIGHT_BLUE, size=size.small)
plotshape(showExitArrows and exitDetected, "Exit Arrow", shape.arrowdown, location.abovebar, BRIGHT_ORANGE, size=size.small)

// Background colors for trade zones
positionZone = strategy.position_size > 0
bgcolor(showStopLevels and positionZone ? SUBTLE_GREEN : na, title="Position Status")

// Performance metrics calculation (moved outside debug scope for Pine Script v6 compatibility)
totalReturnPct = strategy.equity > 0 ? ((strategy.equity - strategy.initial_capital) / strategy.initial_capital * 100) : 0

// Track maximum equity ourselves since strategy.max_equity doesn't exist
var float maxEquity = 0.0
if strategy.equity > maxEquity
    maxEquity := strategy.equity

currentDrawdownPct = strategy.equity > 0 and maxEquity > 0 ? ((strategy.equity - maxEquity) / maxEquity * 100) : 0

// Annualized return calculation (fixed dynamic indexing violation)
var int startTime = na
if na(startTime)
    startTime := time

currentTime = time
daysInTest = not na(startTime) ? (currentTime - startTime) / (1000 * 60 * 60 * 24) : 1
yearsInTest = daysInTest / 365.25
equityMultiplier = strategy.equity > 0 and strategy.initial_capital > 0 ? strategy.equity / strategy.initial_capital : 1
annualizedReturnPct = yearsInTest > 0 and equityMultiplier > 0 ? (math.pow(equityMultiplier, 1/yearsInTest) - 1) * 100 : 0

// Debug information table with Universal HTF details and robustness indicators
if showDebugInfo
    // Simplified system validation
    historySufficient = bar_index >= math.max(breakoutLookbackPeriod, dipLookbackPeriod)
    
    debugTable = table.new(position.top_right, 2, 21, bgcolor=color.new(color.white, 80), border_width=1)
    table.cell(debugTable, 0, 0, "🛡️ JON", bgcolor=color.new(color.blue, 70), text_color=color.white, text_size=size.small)
    table.cell(debugTable, 1, 0, "Values", bgcolor=color.new(color.blue, 70), text_color=color.white, text_size=size.small)
    table.cell(debugTable, 0, 1, "Total Return %", text_size=size.small)
    table.cell(debugTable, 1, 1, str.tostring(totalReturnPct, "#.##") + "%", text_size=size.small)
    table.cell(debugTable, 0, 2, "Annualized %", text_size=size.small)
    table.cell(debugTable, 1, 2, str.tostring(annualizedReturnPct, "#.##") + "%", text_size=size.small)
    table.cell(debugTable, 0, 3, "Current DD %", text_size=size.small)
    table.cell(debugTable, 1, 3, str.tostring(currentDrawdownPct, "#.##") + "%", text_size=size.small)
    table.cell(debugTable, 0, 4, "Test Duration", text_size=size.small)
    table.cell(debugTable, 1, 4, str.tostring(yearsInTest, "#.##") + " years", text_size=size.small)
    table.cell(debugTable, 0, 5, "⚡ Chart TF", text_size=size.small)
    table.cell(debugTable, 1, 5, timeframe.period, text_size=size.small)
    table.cell(debugTable, 0, 6, "⚡ Monthly Breakout", text_size=size.small)
    table.cell(debugTable, 1, 6, str.tostring(breakoutLookbackPeriod) + " months", text_size=size.small)
    table.cell(debugTable, 0, 7, "⚡ Monthly Dip", text_size=size.small)
    table.cell(debugTable, 1, 7, str.tostring(dipLookbackPeriod) + " months", text_size=size.small)
    table.cell(debugTable, 0, 8, "⚡ History", text_size=size.small)
    table.cell(debugTable, 1, 8, str.tostring(bar_index) + " bars " + (historySufficient ? "✅" : "⚠️"), text_size=size.small)
    table.cell(debugTable, 0, 9, "Position Size", text_size=size.small)
    table.cell(debugTable, 1, 9, str.tostring(strategy.position_size, "##.##"), text_size=size.small)
    table.cell(debugTable, 0, 10, "Entry Price", text_size=size.small)
    table.cell(debugTable, 1, 10, not na(tradeEntryPrice) ? str.tostring(tradeEntryPrice, "##.##") : "N/A", text_size=size.small)
    table.cell(debugTable, 0, 11, "Current Stop", text_size=size.small)
    table.cell(debugTable, 1, 11, not na(currentStopPrice) ? str.tostring(currentStopPrice, "##.##") : "N/A", text_size=size.small)
    table.cell(debugTable, 0, 12, "🔍 ATR (50-period)", text_size=size.small)
    table.cell(debugTable, 1, 12, not na(atr) and atr != 0 ? str.tostring(atr, "##.####") : (na(atr) ? "NA" : "ZERO"), text_size=size.small)
    table.cell(debugTable, 0, 13, "🔍 Monthly High", text_size=size.small)
    table.cell(debugTable, 1, 13, not na(htfBreakoutHigh) ? str.tostring(htfBreakoutHigh, "##.##") : "N/A", text_size=size.small)
    table.cell(debugTable, 0, 14, "🔍 Monthly Low", text_size=size.small)
    table.cell(debugTable, 1, 14, not na(htfDipLow) ? str.tostring(htfDipLow, "##.##") : "N/A", text_size=size.small)
    table.cell(debugTable, 0, 15, "🔍 Monthly High Age", text_size=size.small)
    table.cell(debugTable, 1, 15, not na(htfHighAgeDays) ? str.tostring(htfHighAgeDays) + " days" : "N/A", text_size=size.small)
    table.cell(debugTable, 0, 16, "🔍 Monthly Low Age", text_size=size.small)
    table.cell(debugTable, 1, 16, not na(htfLowAgeDays) ? str.tostring(htfLowAgeDays) + " days" : "N/A", text_size=size.small)
    table.cell(debugTable, 0, 17, "🔍 Reference Asset", text_size=size.small)
    table.cell(debugTable, 1, 17, useReferenceAsset and not na(referenceClose) ? str.tostring(referenceClose, "##.##") : "Disabled", text_size=size.small)
    table.cell(debugTable, 0, 18, "🔍 Trail Distance", text_size=size.small)
    table.cell(debugTable, 1, 18, str.tostring(adjustedAtrTrailMultiplier, "#.#") + " ATR", text_size=size.small)
    table.cell(debugTable, 0, 19, "Trail Activated", text_size=size.small)
    table.cell(debugTable, 1, 19, trailStartActivated ? "YES" : "NO", text_size=size.small)
    table.cell(debugTable, 0, 20, "Data Valid", text_size=size.small)
    table.cell(debugTable, 1, 20, isDataValid ? "✅" : "⚠️", text_size=size.small)

// Plot Trailing Stop as a moving line that updates each bar
plot(strategy.position_size > 0 and not na(currentStopPrice) ? currentStopPrice : na, title="Trailing Stop", color=color.red, linewidth=2, style=plot.style_line)