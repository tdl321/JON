---
description: Product Requirements Document for JON trading algorithm. Defines core philosophy, strategy features, risk management requirements, and acceptance criteria for the automated trading system.
globs: 
alwaysApply: false
---
# ðŸ“„ Product Requirements Document (PRD): JON Strategy v2.0
## 1. Executive Summary & Philosophy

### 1.1 Vision Statement
JON is a sophisticated, fully automated futures trading system designed to deliver superior risk-adjusted returns through multi-asset diversification and systematic trend following. The strategy eliminates emotional decision-making by delegating all trading decisions to a mathematically robust, comprehensively validated algorithm.

### 1.2 Core Philosophy
- **Automate Everything**: Complete algorithmic execution with zero manual intervention
- **Robustness over Optimization**: Universal principles that work across all asset classes and market conditions  
- **Comprehensive Data Validation**: No trading occurs without complete, valid data dependencies
- **Sidestep Bear Markets**: Systematic capital preservation during major downturns
- **Low-Frequency, High-Quality**: <1 trade per month per asset with rigorous signal validation
- **Turtle Methodology**: Modern implementation of proven position sizing and risk management principles

### 1.3 Target Asset Universe
**Primary Futures Contracts**: 
- **Nasdaq Futures (NQ)**: Equity/technology sector exposure
- **Yen Futures (6J)**: Currency/safe haven positioning  
- **Gold Futures (GC)**: Commodity/inflation hedge
- **BTC Futures (BTC)**: Digital asset/risk-on exposure

**Diversification Strategy**: Multi-asset approach across uncorrelated sectors to maximize risk-adjusted returns while minimizing portfolio volatility.

---

## 2. Technical Architecture & System Design

### 2.1 Core System Framework (F-1 through F-5)

#### F-1: Trend Filter System (Bear Market Protection)
**Objective**: Prevent long positions during bear market conditions
- **Primary Filter**: 200-period SMA trend validation on target asset
- **Reference Filter**: Optional correlation with reference asset (CRYPTOCAP:TOTAL)
- **Implementation**: Dual-layer validation preventing entries during bearish trends
- **Exit Trigger**: Immediate position closure when trend filter fails

#### F-2: Dual-Pathway Breakout Entry System
**Objective**: Capture momentum breakouts using two distinct trigger mechanisms

**F-2D: Donchian Monthly High Breakout (Turtle Method)**
- **Trigger**: Price crosses above 55-period monthly Donchian channel high
- **Age Validation**: Monthly high must be 20-200 days old when crossed
- **Cross Timing**: Entry must occur within 20 days of crossing the high
- **Logic**: Classic Turtle long-term breakout methodology with modern age validation

**F-2V: Volume Spike Alternative Trigger (High-Conviction)**
- **Volume Requirement**: â‰¥50% increase over 20-period average
- **Price Movement**: â‰¥2% cumulative rise within 3-5 day window
- **Window Logic**: Volume spike and price rise must occur within overlapping timeframes
- **Purpose**: Alternative high-conviction entry when traditional breakouts may be insufficient

#### F-3: Dip Buy Recovery System
**Objective**: Counter-trend entries at monthly support levels with recovery confirmation
- **Trigger**: Touch monthly 55-period Donchian low + recovery confirmation
- **Touch Buffer**: 0.5% tolerance for "touching" the monthly low
- **Recovery Buffer**: 1.0% rise above monthly low for confirmation
- **Age Validation**: Monthly low must be 15-90 days old when touched
- **Recovery Timing**: Must show recovery within 30 days of touching low

#### F-4: Profit-Activated Trailing Exit System
**Objective**: Dynamic profit protection with volatility-responsive trailing
- **Activation**: Trailing begins when position shows 5Ã—ATR profit
- **Trail Distance**: 5Ã—ATR below highest point (with dynamic volatility adjustment)
- **Volatility Response**: 4-zone dynamic adjustment based on current vs. average ATR
- **Correlation**: Optional correlation with Unit 1 stop for position coordination

#### F-5: Opportunistic Exit System (Failed Breakout Protection)
**Objective**: Early exit for breakout failures and significant weakness
- **Follow-Through**: Exit if breakout fails to achieve 0.5% follow-through within 5 bars
- **Weakness Detection**: Exit if price falls 2-3% below entry (correlation-dependent)
- **Channel Loss**: Exit if Donchian channel is lost (0.5% buffer)
- **Application**: Only applies to F-2 breakout entries, not F-3 dip buys

### 2.2 Risk Management Framework (R-1 through R-4)

#### R-1: Turtle Unit Position Sizing
**Objective**: Volatility-normalized position sizing with strict risk controls
- **Unit Risk**: 1% of equity per unit (adjustable 0.1-2.0%)
- **Maximum Trade Risk**: 4% total (max 4 units per position)
- **Formula**: `(Equity Ã— 1%) Ã· (ATR Ã— Stop Multiplier)`
- **Validation**: 95% max equity usage, $100 minimum position value

#### R-2: Multi-Layer Stop Loss System
**Objective**: Contextual stop placement with correlation features
- **Base Stop**: 5Ã—ATR below entry price
- **Correlation Logic**: 
  - Breakout entries correlate with swing lows (0.5% buffer)
  - Dip buy entries correlate with monthly lows (1.0% buffer)
- **Minimum Distance**: 2.0% minimum stop distance for safety
- **Dynamic Adjustment**: Never moves against position, only in favor

#### R-3: Asset-Specific Preset System (B-3 Implementation)
**Objective**: Tailored parameters for different asset classes
- **Global Default**: 1.0Ã— base risk parameters
- **Crypto (BTC Futures)**: 0.8Ã— risk (higher volatility accommodation)
- **Indices (Nasdaq Futures)**: 1.2Ã— risk (institutional flow patterns)
- **Metals (Gold Futures)**: 1.0Ã— risk (baseline parameters)
- **Currency (Yen Futures)**: 1.0Ã— risk (balanced FX approach)

#### R-4: Pyramiding Engine (Advanced Unit System)
**Objective**: Systematic position scaling on favorable moves
- **Unit Spacing**: 1Ã—ATR profit intervals between units
- **Maximum Units**: 4 total (1 initial + 3 additional)
- **Risk Validation**: Each unit maintains same risk profile as initial
- **Correlation Features**: Optional unit correlation for entries and trailing stops
- **Trail Integration**: Stop loss trails on unit additions if enabled

### 2.3 Data Validation Architecture (Mission-Critical)

#### Comprehensive Validation Framework
**Philosophy**: NO TRADING without complete, valid data. No fallbacks, no approximations.

**Validation Categories**:
1. **Basic Market Data**: OHLC integrity, positive prices, volume validation
2. **Technical Indicators**: ATR calculation, SMA validation, sufficient history
3. **Monthly Data**: Donchian channel data from request.security() calls
4. **Reference Assets**: Optional reference asset data validation
5. **Volume System**: Volume history for F-2V spike detection
6. **Mathematical Safety**: Division by zero prevention, range validation
7. **Strategy System**: Equity validation, position size integrity
8. **Historical Sufficiency**: Adequate lookback for all calculations + age validations

**Error Handling**: Comprehensive debug logging identifies specific validation failures with detailed context for troubleshooting.

---

## 3. User Interface Design (Minimalist Approach)

### 3.1 Essential-Only Visual Framework
**Philosophy**: Clean, distraction-free interface focused solely on trading decisions

#### UI-1: Core Trading Visuals
- **Entry Arrows**: Blue triangles with system labels (F-2D, F-2V, F-3D)
- **Exit Arrows**: Orange triangles with exit reason (F-4, F-5, F-1, SL)
- **Stop Loss Line**: Red line showing current stop level
- **Profit/Risk Zones**: Subtle background colors (light green profit, light red risk)

#### UI-2: Eliminated Complexity
**Removed Elements**: Performance tables, status displays, trend lines, Donchian plots, debug tables, complex overlays

**Rationale**: Traders need immediate signal recognition and risk awareness, not data overload. The algorithm handles all decisions; the UI only needs to show what happened and current risk.

### 3.2 System Label Architecture
**Entry Labels**: F-2D (Donchian), F-2V (Volume), F-3D (Dip Buy)
**Exit Labels**: F-4 (Trail), F-5 (Failed), F-1 (Bear), SL (Stop)
**Purpose**: Immediate identification of which system triggered each trade for performance analysis

---

## 4. Input Parameter Specification (Locked Framework)

### 4.1 Parameter Hierarchy
**Tier 1 - LOCKED**: Core input parameters (lines 35-120) - NO modifications without explicit approval
**Tier 2 - Configurable**: Implementation parameters that eliminate hardcoded values
**Tier 3 - Implementation**: Bug fixes and functionality improvements below core indicators

### 4.2 System-Specific Parameters

#### F-1 Trend Filter Parameters
```pinescript
trendFilterEnabled = input.bool(true, "Enable 200 SMA Trend Filter")
trendSmaLength = input.int(200, "Trend SMA Length", minval=50, maxval=500)
useReferenceAsset = input.bool(true, "Use Reference Asset Filter")
referenceSymbol = input.symbol("CRYPTOCAP:TOTAL", "Reference Asset Symbol")
```

#### F-2 Breakout System Parameters
```pinescript
enableBreakoutEntry = input.bool(true, "Enable Breakout Entry")
breakoutTimeframe = input.string("1M", "Breakout Timeframe (Monthly)")
monthlyDonchianPeriod = input.int(55, "Monthly Donchian Period", minval=20, maxval=200)
breakoutCrossWithinDays = input.int(20, "Cross Above Within (days)", minval=1, maxval=60)
breakoutMinAgeDays = input.int(20, "Min Age of Crossed High (days)")
breakoutMaxAgeDays = input.int(200, "Max Age of Crossed High (days)")

// F-2V Volume Spike System
enableVolumeSpikeTrigger = input.bool(true, "Enable Volume Spike Trigger")
volumeThresholdPercent = input.float(50.0, "Volume Spike Threshold %", minval=10.0, maxval=200.0)
volumeLookbackPeriod = input.int(20, "Volume Average Period", minval=5, maxval=50)
volumeSpikeMinMove = input.float(2.0, "Min Price Move % for Volume Trigger")
```

#### F-3 Dip Buy Parameters
```pinescript
enableDipBuyEntry = input.bool(true, "Enable Dip Buy Entry")
dipBuyTimeframe = input.string("1M", "Dip Buy Timeframe (Monthly)")
monthlyDipDonchianPeriod = input.int(55, "Monthly Dip Donchian Period")
dipRecoveryWithinDays = input.int(30, "Recovery Within (days)")
dipMinAgeDays = input.int(15, "Min Age of Crossed Low (days)")
dipMaxAgeDays = input.int(90, "Max Age of Crossed Low (days)")
dipTouchBuffer = input.float(0.5, "Dip Touch Buffer %")
dipRecoveryBuffer = input.float(1.0, "Recovery Buffer %")
```

#### F-4 Exit Strategy Parameters
```pinescript
atrTrailMultiplier = input.float(5.0, "Trailing Distance x ATR")
trailStartProfitMultiplier = input.float(5.0, "Trailing Start at Profit x ATR")
trailOnTouchHigh = input.bool(false, "Trail Start on Touch High")
enableDynamicTrail = input.bool(true, "Enable Dynamic Trail Adjustment")
volatilityLookback = input.int(14, "Volatility Reference Period")
```

#### R-1/R-2 Risk Management Parameters
```pinescript
unitRiskPercent = input.float(1.0, "Risk Per Unit %", minval=0.1, maxval=2.0)
maxTradeRiskPercent = input.float(4.0, "Max Total Trade Risk %")
atrLength = input.int(14, "ATR Length", minval=5, maxval=50)
stopLossMultiplier = input.float(5.0, "Initial Stop Loss x ATR")
correlateUnit1 = input.bool(true, "Correlate Unit 1 Entry")
correlateAdditionalUnits = input.bool(true, "Correlate Additional Units")
correlateUnit1TrailSL = input.bool(true, "Correlate Unit 1 Trail SL")
swingLowBuffer = input.float(0.5, "Swing Low Buffer %")
monthlyLowBuffer = input.float(1.0, "Monthly Low Buffer %")
minStopDistance = input.float(2.0, "Min Stop Distance %")
```

---

## 5. Logical System Integration

### 5.1 Entry Priority Logic
1. **Data Validation**: All systems require `isDataValid = true`
2. **Trend Filter**: All entries require `isTrendFilterPassed = true`
3. **Position Check**: Only enter when `strategy.position_size == 0`
4. **Signal Priority**: F-2 and F-3 can trigger independently (OR logic)
5. **Risk Validation**: All entries require valid stop loss and position sizing

### 5.2 Pyramiding Logic Flow
1. **Profit Threshold**: (Current Price - Entry Price) / ATR â‰¥ Unit Spacing
2. **Price Distance**: Minimum ATR distance from last pyramid entry
3. **Signal Confirmation**: New F-2 or F-3 signal while in position
4. **Risk Check**: Total trade risk â‰¤ Maximum Trade Risk
5. **Correlation**: Apply correlation logic based on unit settings

### 5.3 Exit Logic Hierarchy
1. **F-1 Trend Filter**: Immediate exit on trend failure (highest priority)
2. **F-5 Opportunistic**: Early exit for failed breakouts (F-2 entries only)
3. **F-4 Trailing Stop**: Dynamic trailing for profit protection
4. **R-2 Hard Stop**: Initial stop loss as final safety net

### 5.4 Error Prevention Architecture
**Philosophy**: Prevent all possible error states through comprehensive validation

**Prevention Categories**:
- **Data Integrity**: Comprehensive validation before any calculations
- **Mathematical Safety**: Division by zero prevention, range checking
- **Position Sizing**: Multiple validation layers for trade size calculation
- **Stop Loss Logic**: Contextual stop placement with safety limits
- **System State**: Proper variable initialization and state management

---

## 6. Testing & Validation Requirements

### 6.1 Multi-Asset Validation Criteria
**Required Assets**: Nasdaq Futures (NQ), Yen Futures (6J), Gold Futures (GC), BTC Futures (BTC)
**Performance Standard**: Outperform buy-and-hold on risk-adjusted basis
**Historical Coverage**: Include major market events (2008, 2020, 2022 crashes)
**Trade Frequency**: Maintain <1 trade per month per asset average

### 6.2 Robustness Testing
**Parameter Sensitivity**: Core logic must work across reasonable parameter ranges
**Market Conditions**: Function in trending, ranging, and volatile markets
**Data Quality**: Handle missing data, gaps, and irregular trading hours
**Asset Correlation**: Maintain performance across different correlation environments

### 6.3 Production Readiness Checklist
- âœ… All 5 core systems (F-1 through F-5) implemented and validated
- âœ… All 4 risk systems (R-1 through R-4) implemented and validated  
- âœ… Comprehensive data validation preventing all error states
- âœ… Clean, minimalist UI with essential-only visual elements
- âœ… Complete parameter framework with locked core settings
- âœ… Multi-asset testing across all target futures contracts
- âœ… Performance validation against buy-and-hold benchmarks
- âœ… Trade frequency validation (<1 trade/month/asset)

---

## 7. Success Metrics & Acceptance Criteria

### 7.1 Performance Metrics
- **Risk-Adjusted Returns**: Sharpe ratio > 1.0 across all assets
- **Maximum Drawdown**: <20% during major market downturns  
- **Trade Frequency**: <12 trades per year per asset
- **Win Rate**: >50% with average win > average loss
- **Profit Factor**: >1.5 across different market conditions

### 7.2 System Reliability
- **Data Validation**: 100% uptime with comprehensive error prevention
- **Execution Accuracy**: No missed signals due to calculation errors
- **Parameter Compliance**: All core parameters locked and validated
- **UI Functionality**: Clear signal identification and risk visualization
- **Documentation**: Complete PRD-to-implementation mapping

### 7.3 Operational Excellence
- **Automation**: Zero manual intervention required
- **Monitoring**: Clear visual feedback on system status and signals
- **Maintenance**: Minimal ongoing maintenance with robust error handling
- **Scalability**: Easy addition of new assets with existing parameter framework
- **Professional Grade**: Ready for institutional or sophisticated retail use

---

**Document Version**: 2.0 (Complete Strategy Implementation)  
**Last Updated**: December 2024  
**Implementation Status**: Production Ready  
**Next Phase**: Multi-Asset Validation & Live Trading Deployment
