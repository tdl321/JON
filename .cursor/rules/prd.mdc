---
description: Product Requirements Document for JON trading algorithm. Defines core philosophy, strategy features, risk management requirements, and acceptance criteria for the automated trading system.
globs: 
alwaysApply: false
---
# 📄 Product Requirements Document (PRD): JON
## 1. Executive Summary & Philosophy
### 1.1 Vision
To provide a superior alternative to traditional "buy and hold" investing that delivers comparable or greater returns with significantly less drawdown.  
JON is designed as a fully automated, low-stress system that delegates all entry, exit, and risk management decisions to a pre-defined, robust algorithm.  

### 1.2 Core Philosophy
- **Automate Everything**  
  Leverage modern tools (AI, webhooks) to eliminate emotional errors and the need for manual execution. 
- **Robustness over Optimization**  
  The system's credibility comes from its proven performance across multiple asset classes (Crypto, Indices, Metals) and its resilience through numerous historical market crashes (1929, 1987, 2000, 2008, 2020, 2022). It is a robust, not fragile, system.
- **Sidestep Bear Markets**  
  The primary alpha is generated by systematically avoiding catastrophic drawdowns associated with major bear markets. The system is designed to go to the sidelines and preserve capital, re-entering when the trend safely resumes.
- **Low-Frequency Investing**  
  This is not day trading. With an average of less than one trade per month per asset, the system prioritizes high-quality, long-term signals, demanding patience from the user.
- **Logic Schema Architecture**  
  Separate signal definition from execution using a mathematical approach: define logical conditions as pure functions (Phase 2), then substitute them into execution engines (Phase 5). This enables clean testing, debugging, and modular design while maintaining robustness.
---
## 2. Robustness & Backtesting Doctrine
| ID    | Requirement            | Description                                                                                      | Acceptance Criteria                                                                                     |
|-------|------------------------|--------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------|
| B-1   | Multi-Asset Validation | The core strategy logic must be profitable and robust across fundamentally different assets.    | Must outperform "buy and hold" on a risk-adjusted basis on: `BTCUSD`, `NDX/QQQ`, and `XAUUSD`.          |
| B-2   | Deep Historical Data   | The strategy must be tested against all major market crises.                                     | Must include: 1987, 2000, 2008, 2020, 2022 — wherever data is available.                                |
| B-3   | No Over-Optimization   | Core parameters must be universal, with minor justifiable asset-specific logic only.             | A "Global Default" preset is required. Deviations must be explicitly justified (e.g., NASDAQ 401k flows).|
---
## 3. System Features & Requirements
### 3.1 Core Strategy Logic
| ID    | Feature                      | Description                                                                                           | Acceptance Criteria                                                                                                     |
|--------|-----------------------------|-------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------|
| F-1    | 200-Period SMA Trend Filter | Confirms macro uptrend to avoid long positions in bear markets.                                       | 1. Input: `trendFilterEnabled` (default: true) <br> 2. Input: `trendSmaLength` (50-500, default: 200) <br> 3. Input: `useReferenceAsset` (default: false) <br> 4. Input: `referenceSymbol` (default: "CRYPTOCAP:TOTAL") <br> 5. Asset must be above its SMA, optional reference asset check |
| F-2    | Entry Trigger 1: Breakout   | Enter long on breakout and close above recent high.                                                   | 1. Input: `enableBreakoutEntry` (default: true) <br> 2. Input: `breakoutLookback` (5-100, default: 20) <br> 3. Input: `breakoutMinAge` (1-50, default: 3) <br> 4. Input: `breakoutMaxAge` (5-200, default: 50) <br> 5. Entry on candle close above recent high within age range |
| F-3    | Entry Trigger 2: Dip Buy    | Enter long after retesting a recent low and recovering.                                               | 1. Input: `enableDipBuyEntry` (default: true) <br> 2. Input: `dipBuyLookback` (5-100, default: 20) <br> 3. Input: `dipRecoveryThreshold` (0.1-5.0%, default: 1.0%) <br> 4. Entry on close above recovery threshold from recent low |
| F-4    | Configurable Exit Strategy  | Select exit type to fit asset behavior.                                                               | 1. Input: `exitMode` options: ["ATR Trail", "Aggressive Profit Take"] (default: "ATR Trail") <br> 2. Input: `atrTrailMultiplier` (0.5-5.0, default: 2.0) <br> 3. Input: `aggressiveProfitTarget` (1.0-20.0%, default: 5.0%) <br> 4. User-selectable mode for different asset types |
| F-5    | Opportunistic Profit Taking | Exit failed breakouts that lack follow-through.                                                       | 1. Input: `enableOpportunisticExit` (default: true) <br> 2. Input: `failedBreakoutBars` (3-50, default: 10) <br> 3. Exit if breakout fails to make new high within timeout <br> 4. Exit if close falls 2% below entry (significant weakness detection) |
---
### 3.2 Risk & Position Management
| ID    | Feature                 | Description                                                                                     | Acceptance Criteria                                                                                      |
|--------|------------------------|--------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|
| R-1    | ATR-Based Sizing       | Size position based on volatility and fixed account %                                            | 1. Input: `riskPercent` (0.1-10.0%, default: 1.0%) <br> 2. Input: `atrLength` (5-50, default: 14) <br> 3. Formula: `(Equity * Risk%) / (ATR * Stop Multiplier)` <br> 4. Max position validation: 95% of equity <br> 5. Min position validation: $100 minimum |
| R-2    | Hard Stop Loss         | Enforce stop loss on every trade.                                                               | 1. Input: `stopLossMultiplier` (0.5-5.0, default: 2.0) <br> 2. Stop placed `N` ATR below entry price <br> 3. Entry-type specific logic: breakouts use recent support, dip buys use trigger low <br> 4. Validation: stop must be 0.5-10% from entry price |
| R-3    | Profit-Funded Leverage | Leverage can be used **only** with unrealized profits.                                          | 1. Input parameter: `enableProfitLeverage` with confirmation dialog <br> 2. Must be opt-in, clearly documented <br> 3. Never used for initial position sizing unless user toggles it <br> 4. **Status: Framework implemented, execution logic pending** |
| R-4    | Pyramiding Engine      | Add to winning trades at logical re-entry points.                                               | 1. Input parameter: `maxPyramidEntries` (1-3 range) <br> 2. Each tiered entry must have own stop <br> 3. Stops managed individually or with master trail <br> 4. **Status: Basic framework implemented, advanced logic pending** |
---
### 3.3 User Interface & Visuals
| ID    | Feature                  | Description                                                                                     | Acceptance Criteria                                                                                      |
|--------|--------------------------|--------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------|
| UI-1   | On-Chart Signals         | Show all trades, filters, and exits visually with specific colors and labels.                   | 1. Entry signals: Blue triangles (▲) for breakout, green triangles (▲) for dip buy <br> 2. Entry execution labels: "BREAKOUT ENTRY" (blue), "DIP BUY ENTRY" (green) <br> 3. Exit execution labels: "STOP LOSS" (red), "ATR TRAIL" (orange), "PROFIT TARGET" (lime), "FAILED BREAKOUT" (purple) <br> 4. 200 SMA line: Green (bull trend), red (bear trend), 20% transparency <br> 5. Stop levels: Current stop (red, 30% transparency), ATR trail (orange, 40% transparency), profit target (lime, 40% transparency) |
| UI-2   | Strategy Tester Support  | Use TradingView's native backtester with comprehensive performance table and benchmark overlay.  | 1. Real-time performance table (top-right, 2x10 cells, white background 80% transparency) <br> 2. Metrics: Strategy Return, Buy & Hold Return, Excess Return, Max Drawdown, Net Profit, Profit Factor, Total Trades, Win Rate, Current Signal <br> 3. Color coding: Green/red for positive/negative performance, blue for neutral metrics <br> 4. Buy & hold benchmark calculation with automatic comparison <br> 5. Current signal status display (BREAKOUT/DIP BUY/WAIT) |
---
### 3.4 Architecture & Design Patterns
| ID    | Feature                      | Description                                                                                           | Acceptance Criteria                                                                                                     |
|--------|------------------------------|-------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------|
| A-1    | Logic Schema Definition      | Define all entry/exit conditions as pure logical functions separate from execution.                   | 1. Conditions return boolean values. <br> 2. No side effects in condition functions. <br> 3. Testable in isolation.     |
| A-2    | Execution Layer Integration  | Execute trades by substituting logical conditions into position management engine.                     | 1. Clean separation between signal and execution. <br> 2. Reusable conditions across multiple contexts.                |
| A-3    | Modular Signal Framework     | Enable multiple entry types (breakout, dip buy) with shared validation and risk management.           | 1. Each signal type uses common risk framework. <br> 2. Prioritized execution when multiple signals trigger.          |
---
### 3.5 Debug & Validation Framework
| ID    | Feature                      | Description                                                                                           | Acceptance Criteria                                                                                                     |
|--------|------------------------------|-------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------|
| D-1    | Phase-Specific Debug Logging | Comprehensive logging system for each development phase with detailed status reporting.               | 1. Input: `showDebugInfo` (default: false) <br> 2. Phase 3: Position sizing validation <br> 3. Phase 4: Exit system status <br> 4. Phase 5: Entry execution tracking <br> 5. Barstate.islast triggered logging |
| D-2    | Asset Validation Tracking    | Multi-asset validation framework with performance monitoring and trade frequency analysis.            | 1. Symbol and timeframe identification <br> 2. Trade frequency calculation (trades/month) <br> 3. Performance vs Buy & Hold tracking <br> 4. Validation criteria monitoring (B-1 requirements) |
| D-3    | Strategy Status Reporting    | Real-time strategy status with comprehensive operational metrics and next steps guidance.             | 1. 6-phase completion status with checkmarks <br> 2. Current signal status with emojis <br> 3. Data validation status <br> 4. Next steps for multi-asset testing <br> 5. Ready-for-live-trading confirmation |
| D-4    | Data Validation Engine       | Comprehensive data validation to prevent errors and ensure safe execution.                            | 1. Price data validation (OHLC integrity) <br> 2. ATR validation (non-zero, non-NA) <br> 3. Reference asset data validation <br> 4. Position sizing safety checks <br> 5. Stop loss validation logic |
---
### 3.6 Input Parameter Framework
| ID    | Feature                      | Description                                                                                           | Acceptance Criteria                                                                                                     |
|--------|------------------------------|-------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------|
| I-1    | Display Control Inputs       | User control over visual elements and debugging information.                                          | 1. Input: `showTrendSma` (default: true) <br> 2. Input: `showStopLevels` (default: true) <br> 3. Input: `showTradeLabels` (default: true) <br> 4. Input: `showDebugInfo` (default: false) |
| I-2    | Strategy Configuration       | Core strategy settings with proper defaults and validation ranges.                                    | 1. Initial capital: $100,000 <br> 2. Commission: 0.1% <br> 3. Pyramiding: 3 <br> 4. Default quantity: 100% of equity <br> 5. Currency: USD |
---
## 4. Implementation Architecture (6-Phase Development Framework)
### 4.1 Complete Development Phase Structure
The JON strategy follows a **6-phase development methodology** with specific validation checkpoints:

**Phase 1: Foundation Infrastructure**
- **1.1 Project Setup**: Pine Script v5 strategy template with proper headers and version tracking
- **1.2 Input System**: Comprehensive parameter framework with all F-1 to F-5, R-1 to R-4, UI-1 to UI-2 inputs
- **1.3 Core Indicators**: SMA(200), ATR calculation, reference asset data with validation
- **Validation**: Script compiles, inputs display correctly, indicators plot properly

**Phase 2: Core Strategy Logic (Definition Layer)**
- **2.1 Trend Filter System**: 200 SMA trend filter with optional reference asset (F-1)
- **2.2 Signal Detection Engine**: Recent high/low identification for F-2 and F-3 triggers
- **2.3 Entry Framework**: Pure boolean condition definitions without execution
- **Validation**: Conditions trigger correctly, no trades executed (logging only)

**Phase 3: Risk Management Foundation**
- **3.1 Position Sizing**: ATR-based calculation with validation (R-1)
- **3.2 Stop Loss System**: Hard stop placement and management (R-2)
- **3.3 Risk Validation**: Data validation and error prevention
- **Validation**: Position sizes reasonable, stops place correctly, no division errors

**Phase 4: Exit Strategy System**
- **4.1 ATR Trailing Exit**: Dynamic trailing stops for trending assets (F-4)
- **4.2 Aggressive Profit Take**: Fixed target system for mean-reverting assets (F-4)
- **4.3 Exit Selection**: User-configurable mode switching (F-4)
- **Validation**: Exit modes work correctly, stops trail properly

**Phase 5: Entry Logic Integration (Execution Layer)**
- **5.1 Breakout Entry Execution**: Full trade execution with risk management (F-2)
- **5.2 Dip Buy Entry Execution**: Full trade execution with risk management (F-3)
- **5.3 Opportunistic Exit Logic**: Failed breakout detection and exit (F-5)
- **Validation**: Trades execute properly, risk management integrated

**Phase 6: Interface & Validation**
- **6.1 Visual Interface**: Complete on-chart signals and information display (UI-1)
- **6.2 Strategy Tester**: Performance table and benchmark comparison (UI-2)
- **6.3 Multi-Asset Validation**: Testing framework for BTCUSD, NDX/QQQ, XAUUSD (B-1)
- **Validation**: All visuals display, performance tracking works, ready for multi-asset testing

### 4.2 Logic Schema Pattern (Phase 2 + Phase 5)
The separation between **definition** and **execution** follows a **mathematical substitution model**:

**Phase 2: Pure Logic Definition**
```pine
// Define conditions as boolean functions (no side effects)
breakoutEntryCondition = enableBreakoutEntry and 
                        isTrendFilterPassed and 
                        areIndicatorsValid and
                        close > recentHigh
```

**Phase 5: Execution Substitution**
```pine  
// Substitute definitions into execution engine
if breakoutEntryCondition and canEnterNewPosition()
    executeBreakoutEntry()
```

### 4.3 Development Validation Protocol
Each phase requires **complete validation** before proceeding:
1. **Functional Testing**: All features work as specified
2. **Error Handling**: No runtime errors or invalid states
3. **Performance Validation**: No excessive computation or memory usage
4. **Integration Testing**: New phase integrates cleanly with previous phases
5. **Documentation Update**: Version changelog and status reporting updated

### 4.4 Benefits of 6-Phase Architecture
- **Risk Mitigation**: Each phase validated independently before proceeding
- **Clean Dependencies**: Clear phase dependencies prevent integration issues
- **Testability**: Logic can be validated without execution risk
- **Modularity**: Components can be modified without affecting other phases
- **Robustness**: Systematic approach ensures comprehensive implementation
- **Maintainability**: Clear structure makes debugging and updates easier

### 4.5 Version Control & Documentation
**Version Tracking System**: Comprehensive changelog with semantic versioning
- **Major versions**: Complete phase implementations (v1.0.0, v2.0.0, etc.)
- **Minor versions**: Individual task completions (v2.1.0, v2.2.0, etc.)
- **Phase documentation**: Each phase includes completion status and task breakdown
- **Implementation notes**: Specific implementation details and design decisions

**Status Reporting System**: Real-time implementation status with completion tracking
- **Phase completion indicators**: ✅ checkmarks for completed phases
- **Signal status reporting**: Real-time emoji indicators (🚀, 🛒, ⏱️, etc.)
- **Validation checkpoints**: Comprehensive validation criteria for each phase
- **Next steps guidance**: Clear direction for multi-asset testing and live deployment

**Documentation Standards**: Complete implementation documentation
- **Strategy Information**: Core philosophy, requirements reference, development protocol
- **Input parameter documentation**: All parameters with ranges, defaults, and descriptions
- **Feature mapping**: Direct mapping between PRD requirements (F-1 to F-5, etc.) and implementation
- **Architecture documentation**: Complete explanation of logic schema pattern and phase structure
