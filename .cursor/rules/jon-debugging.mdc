---
description: 
globs: 
alwaysApply: false
---
# JON Strategy Debugging & Error Tracking

## Current Known Issues Log

### üî¥ CRITICAL ISSUES (Strategy Breaking)
**Issue #1: Variable Declaration Order Error**
- **Date Identified**: 2025-01-16
- **Location**: Data validation section (lines 226, 242) vs Donchian calculations (lines 273-274)
- **Problem**: `monthlyDonchianHigh` and `monthlyDonchianLow` referenced before declaration
- **Impact**: TradingView compilation failure - "Undeclared identifier 'monthlyDonchianHigh'"
- **Root Cause**: Data validation section checks monthly variables before they're defined
- **Solution**: Move Donchian calculations to CORE INDICATORS section before validation
- **Status**: RESOLVED - Moved monthly calculations to line ~154
- **Verification**: TradingView compiles without "undeclared identifier" errors

**Issue #2: Local Scope Variable Errors**
- **Date Identified**: 2025-01-16
- **Location**: Pyramiding section (~line 637) and Exit UI section (~line 760)
- **Problem**: `wouldExceedMaxRisk` declared in local scope, `plotshape` used in local scope
- **Impact**: "Undeclared identifier 'wouldExceedMaxRisk'" and "Cannot use plotshape in local scope"
- **Root Cause**: Variables and plotting functions must be in global scope in Pine Script
- **Solution**: Move `wouldExceedMaxRisk` to var declarations, extract `plotshape` to global scope
- **Status**: RESOLVED - Added global var declaration and moved plotshape
- **Verification**: No scope-related compilation errors

**Issue #3: Pine Script Long Line Syntax (CRITICAL HIGH PRIORITY)**
- **Date Identified**: 2025-01-16
- **Priority**: üö® CRITICAL HIGH PRIORITY - RECURRING PATTERN
- **Location**: Multiple locations throughout strategy (SYSTEMATICALLY FIXED)
  - ‚úÖ Lines 338-339: `breakoutEntryCondition` assignment 
  - ‚úÖ Lines 175-181: `basicDataValid` multi-line expression
  - ‚úÖ Lines 184-185: `referenceDataValid` multi-line expression  
  - ‚úÖ Lines 187-188: `volumeDataValid` multi-line expression
  - ‚úÖ Lines 191-194: `monthlyDataValid` multi-line expression
  - ‚úÖ Lines 211-212: `strategyDataValid` multi-line expression (FINAL FIX - resolved line 209 error)
  - ‚úÖ Lines 220-224: `mathSafetyValid` multi-line expression
  - ‚úÖ Lines 226-228: `isDataValid` master validation expression
  - ‚úÖ Lines 608-612: log.info statements (properly indented within blocks)
  - ‚úÖ Data validation log.warning statement (single line)
- **Problem**: Long lines with indentation cause Pine Script syntax errors - "Syntax error at input '+'"
- **Impact**: Complete compilation failure in TradingView, blocks all strategy testing
- **Root Cause**: Pine Script requires continuation lines to start at column 0 (no indentation)
- **Pattern**: This was a SYSTEMATIC RECURRING ERROR affecting multiple validation expressions
- **Solution Applied**: 
  - **SYSTEMATIC FIX**: Converted all multi-line expressions to single-line format
  - **Validation**: Comprehensive grep search confirms NO remaining instances
  - **Prevention**: Updated Pine Script standards with explicit long-line rules
- **CRITICAL PREVENTION RULE**: 
  - **NEVER indent continuation lines in Pine Script**
  - **ALL long lines must start at column 0**
  - **Use single-line concatenation instead of multi-line when possible**
  - **Perform systematic grep search before any TradingView testing**
- **Status**: ‚úÖ FULLY RESOLVED - ALL INSTANCES SYSTEMATICALLY FIXED
- **Verification**: `grep -n "^[ \\t]+.*and$\|^[ \\t]+.*or$\|^[ \\t]+.*\\+$" *.pine` returns NO matches

**Issue #4: Table UI Errors**
- **Location**: Visual Interface section, table creation
- **Problem**: Table calculations may have scope or na value issues
- **Impact**: Broken UI display, incorrect system status
- **Status**: NEEDS ANALYSIS

**Issue #5: Missed Trade Signals**
- **Location**: Signal Detection section
- **Problem**: Entry conditions not triggering when they should
- **Impact**: Strategy misses valid trades per parameters
- **Status**: NEEDS ANALYSIS

### üü° POTENTIAL ISSUES (Monitoring)
**Issue #6: Conditional ta.sma() Warning**
- **Date Identified**: 2025-01-16
- **Location**: Lines 202, 206, 319, 404 (avgVolume, avgAtr calculations)
- **Problem**: Pine Script warns "ta.sma() should be called on each calculation for consistency"
- **Impact**: Potential calculation inconsistencies during conditional execution
- **Root Cause**: ta.sma() calls inside if statements can create inconsistent series behavior
- **Analysis Decision**: INTENTIONALLY NOT FIXING - Benefits outweigh risks:
  - Performance: Only calculate when features are enabled
  - Memory: Avoid wasteful calculations for optional features
  - Clarity: Conditional logic is more readable for complex system
- **Status**: MONITORING - Accepted warning for performance/clarity benefits
- **Verification**: Monitor for any series calculation inconsistencies

**Issue #7: Variable Scope Problems**
- **Location**: Various sections using var declarations
- **Problem**: Variables may not reset properly between trades
- **Impact**: Carry-over state causing incorrect behavior
- **Status**: MONITORING

**Issue #8: Monthly Data Request Issues**
- **Location**: Breakout/Dip Buy signal detection
- **Problem**: request.security calls may have lookahead or data issues
- **Impact**: Incorrect monthly high/low references
- **Status**: MONITORING

## Debugging Patterns for JON Strategy

### Entry Signal Debugging
```pinescript
// Add these debug plots when troubleshooting entries
plotchar(showDebugInfo and traditionalBreakoutCondition, "Debug: Monthly Breakout", "‚Üó", location.belowbar, color.blue)
plotchar(showDebugInfo and volumeSpikeBreakoutCondition, "Debug: Volume Spike", "V", location.belowbar, color.yellow)
plotchar(showDebugInfo and dipBuyEntryCondition, "Debug: Dip Buy", "‚Üô", location.belowbar, color.purple)

// Log entry conditions
if showDebugInfo
    log.info("Entry Debug - Breakout: " + str.tostring(traditionalBreakoutCondition) + 
             " | Volume: " + str.tostring(volumeSpikeBreakoutCondition) + 
             " | Dip: " + str.tostring(dipBuyEntryCondition))
```

### Exit Signal Debugging
```pinescript
// Add these for exit debugging
if showDebugInfo and strategy.position_size > 0
    log.info("Exit Debug - StopHit: " + str.tostring(stopLossHit) + 
             " | TrailActive: " + str.tostring(trailStartActivated) + 
             " | CurrentStop: " + str.tostring(currentStopPrice))
```

### Position Sizing Debugging
```pinescript
// Add for position sizing issues
if showDebugInfo and strategy.position_size != strategy.position_size[1]
    log.info("Position Debug - Size: " + str.tostring(strategy.position_size) + 
             " | Entry: " + str.tostring(strategy.position_avg_price) + 
             " | Stop: " + str.tostring(currentStopPrice))
```

### Monthly Data Debugging
```pinescript
// Add for monthly reference debugging
if showDebugInfo
    table.cell(debugTable, 0, 8, "Monthly High", text_color=color.black)
    table.cell(debugTable, 1, 8, str.tostring(validMonthlyHigh), text_color=color.blue)
    table.cell(debugTable, 0, 9, "Monthly Low", text_color=color.black)
    table.cell(debugTable, 1, 9, str.tostring(validMonthlyLow), text_color=color.purple)
```

## Error Resolution Checklist

### Before Making Changes
- [ ] Backup current working code
- [ ] Identify exact line numbers of issues
- [ ] Test fix on single timeframe first
- [ ] Verify parameters remain unchanged (reference jon-parameters.mdc)

### After Making Changes
- [ ] Compile successfully in TradingView
- [ ] No runtime errors in Strategy Tester
- [ ] UI displays correctly
- [ ] Test with debug info enabled
- [ ] Verify entry/exit signals match expectations

### Testing Protocol
1. **Syntax Check**: Ensure Pine Script compiles without errors
2. **Runtime Check**: Run strategy tester on multiple timeframes
3. **Signal Check**: Enable debug mode and verify signal logic
4. **UI Check**: Verify all tables, plots, and markers display correctly
5. **Historical Check**: Test on known good/bad entry periods

## Common Pine Script v6 Gotchas for JON Strategy

### Variable Scope Issues
```pinescript
// ‚ùå WRONG - Variable declared in wrong scope
if condition
    var float myVar = na  // This won't work as expected

// ‚úÖ CORRECT - Variable declared at global scope
var float myVar = na
if condition
    myVar := someValue
```

### Request.Security Issues
```pinescript
// ‚ùå WRONG - Can cause lookahead bias
monthlyHigh = request.security(syminfo.tickerid, "1M", high)

// ‚úÖ CORRECT - Prevents lookahead bias
monthlyHigh = request.security(syminfo.tickerid, "1M", high, lookahead=barmerge.lookahead_off)
```

### Table Cell Issues
```pinescript
// ‚ùå WRONG - Can cause runtime errors with na values
table.cell(myTable, 0, 0, str.tostring(naValue))

// ‚úÖ CORRECT - Handle na values properly
cellValue = na(naValue) ? "N/A" : str.tostring(naValue)
table.cell(myTable, 0, 0, cellValue)
```

### Long Line Syntax Issues
```pinescript
// ‚ùå WRONG - Indented long lines cause syntax errors
if condition
    log.info("Long message: " + var1 + 
            " | More: " + var2)  // This fails!

// ‚úÖ CORRECT - Long lines must start at column 0
if condition
log.info("Long message: " + var1 + " | More: " + var2)  // No indentation!

// ‚úÖ ALTERNATIVE - Break into shorter lines with proper indentation
if condition
    msg1 = "Long message: " + var1
    msg2 = " | More: " + var2
    log.info(msg1 + msg2)
```

## Issue Tracking Template

```markdown
**Issue #X: [Brief Description]**
- **Date Identified**: YYYY-MM-DD
- **Location**: [File section or line numbers]
- **Problem**: [Detailed description of the issue]
- **Impact**: [How it affects strategy performance]
- **Root Cause**: [What's causing the issue]
- **Solution**: [How to fix it]
- **Status**: [IDENTIFIED/IN_PROGRESS/TESTING/RESOLVED]
- **Verification**: [How to confirm it's fixed]
```

## Performance Monitoring

### Key Metrics to Track
- Entry signal frequency vs expected
- Exit timing accuracy
- Position sizing calculations
- Risk management compliance
- UI responsiveness

### Red Flags to Watch For
- Zero trades over extended periods (signal detection broken)
- Excessive trades (signal logic too sensitive)
- UI showing "N/A" or blank values
- Stop losses not triggering
- Position sizes outside 1-4% risk range

## Debug Mode Best Practices

1. **Always test with showDebugInfo = true first**
2. **Use log.info() liberally for state tracking**
3. **Add temporary plotchar() for visual confirmation**
4. **Create debug tables for complex calculations**
5. **Test edge cases (market opens, holidays, low volume)**

## Contact Points for Issues

- **Parameter Validation**: Reference `jon-parameters.mdc`
- **Code Standards**: Reference `pine-script-standards.mdc`
- **Backtest Validation**: Reference `backtest-validation.mdc`

---

*This file should be updated whenever new issues are discovered or resolved*
