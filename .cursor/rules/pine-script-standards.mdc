---
description: 
globs: 
alwaysApply: false
---
---
description: Pine Script v5 coding standards and best practices for JON strategy development. Covers naming conventions, security requirements, performance optimization, logging standards, and function documentation requirements.
alwaysApply: false
---

# Pine Script v5 Coding Standards for JON

## Code Style & Structure

### Variable Naming Conventions
```pinescript
// ✅ Good - Descriptive and clear
isTrendBullish = close > ta.sma(close, 200)
atrStopLoss = ta.atr(14) * stopMultiplier
entryPrice = strategy.position_avg_price

// ❌ Bad - Ambiguous or unclear
trend = close > ta.sma(close, 200)
stop = ta.atr(14) * 2
price = strategy.position_avg_price
```

### Function Organization
Organize code into logical sections with clear comments:

```pinescript
// ═══════════════════════════════════════════════════════════════════════════════════════════════════
// 📊 INDICATOR CALCULATIONS
// ═══════════════════════════════════════════════════════════════════════════════════════════════════

// ═══════════════════════════════════════════════════════════════════════════════════════════════════
// 📈 ENTRY LOGIC
// ═══════════════════════════════════════════════════════════════════════════════════════════════════

// ═══════════════════════════════════════════════════════════════════════════════════════════════════
// 📉 EXIT LOGIC
// ═══════════════════════════════════════════════════════════════════════════════════════════════════

// ═══════════════════════════════════════════════════════════════════════════════════════════════════
// ⚖️ RISK MANAGEMENT
// ═══════════════════════════════════════════════════════════════════════════════════════════════════
```

## Security & Safety Standards

### Input Validation
```pinescript
// ✅ Always validate external data
referenceSymbol = input.symbol("CRYPTOCAP:TOTAL", "Reference Symbol")
referenceClose = request.security(referenceSymbol, timeframe.period, close)
isReferenceValid = not na(referenceClose)

// ✅ Use confirm=true for sensitive inputs
webhookUrl = input.string("", "Webhook URL", confirm=true)
```

### Error Prevention
```pinescript
// ✅ Prevent division by zero
positionSize = math.na(atr) or atr == 0 ? 0 : (riskCapital / (atr * stopMultiplier))

// ✅ Check for valid price data
validPrice = not na(close) and not na(high) and not na(low)
if validPrice
    // Execute trading logic
```

## Performance Optimization

### Efficient Indicator Calculations
```pinescript
// ✅ Calculate once, use multiple times
sma200 = ta.sma(close, 200)
isTrendBullish = close > sma200
isReferenceAboveSMA = referenceClose > ta.sma(referenceClose, 200)

// ❌ Redundant calculations
isTrendBullish = close > ta.sma(close, 200)
isStrongTrend = close > ta.sma(close, 200) * 1.02  // Recalculating SMA
```

### Resource Management
- Limit `request.security()` calls to essential data only
- Use `varip` sparingly and only when necessary for state management
- Avoid complex calculations in tight loops

## Logging & Debugging Standards

### Trade Execution Logging
```pinescript
// ✅ Log all important events
if strategy.position_size > 0 and strategy.position_size[1] == 0
    log.info("🟢 ENTRY: Price=" + str.tostring(close) + " ATR=" + str.tostring(atr) + " Stop=" + str.tostring(stopLoss))

if strategy.position_size == 0 and strategy.position_size[1] > 0
    log.info("🔴 EXIT: Price=" + str.tostring(close) + " P&L=" + str.tostring(strategy.netprofit))
```

### Strategy State Tracking
```pinescript
// ✅ Track key strategy states
if barstate.islast
    log.info("📊 Strategy Status - Position: " + str.tostring(strategy.position_size) + 
             " | Equity: $" + str.tostring(strategy.equity) + 
             " | DD: " + str.tostring(strategy.max_drawdown))
```

## Documentation Requirements

### Function Documentation
```pinescript
// @function Calculates position size based on ATR and risk percentage
// @param riskPercent The percentage of account to risk per trade
// @param atrValue Current ATR value for volatility measurement
// @param stopMultiplier Multiplier for ATR-based stop loss
// @returns Position size in units/shares
calculatePositionSize(riskPercent, atrValue, stopMultiplier) =>
    accountEquity = strategy.equity
    riskCapital = accountEquity * (riskPercent / 100)
    stopDistance = atrValue * stopMultiplier
    math.na(stopDistance) or stopDistance == 0 ? 0 : (riskCapital / stopDistance)
```

## Integration with JON Strategy
All code must support these [core strategy components](mdc:.cursor/rules/prd.mdc):
- **F-1**: 200-Period SMA Trend Filter implementation
- **F-2**: Breakout entry trigger logic
- **F-3**: Dip buy entry trigger logic
- **F-4**: Configurable exit strategy (ATR Trail vs Aggressive)
- **R-1**: ATR-based position sizing
- **R-2**: Hard stop loss enforcement
- **UI-1**: Clear on-chart signal visualization

## Pine Script Error Log & Solutions

### Compilation Errors

#### Plot Function Parameter Conflicts
**Error**: `Two or more arguments are passed to the "title" parameter. You can pass only one argument.`

**Problem**: Using both positional and named title parameter in plot() function
```pinescript
// ❌ Bad - Causes parameter conflict
plot(strategy.position_size > 0 ? currentStopPrice : na, "Stop Loss", color=color.red, linewidth=2, title="Stop Loss")
```

**Solution**: Remove duplicate title parameter - use either positional OR named
```pinescript
// ✅ Good - Single title parameter (positional)
plot(strategy.position_size > 0 ? currentStopPrice : na, "Stop Loss", color=color.red, linewidth=2)

// ✅ Good - Single title parameter (named)
plot(strategy.position_size > 0 ? currentStopPrice : na, color=color.red, linewidth=2, title="Stop Loss")
```

#### plotshape Text Parameter Issues
**Error**: `plotshape` with `text=entryCode` expected const string but got series string

**Problem**: Using dynamic series string for text parameter
```pinescript
// ❌ Bad - Dynamic text not allowed
plotshape(entryCondition, "Entry", shape.triangleup, location.belowbar, color.blue, text=entryCode)
```

**Solution**: Remove text parameter or use const string
```pinescript
// ✅ Good - No text parameter
plotshape(entryCondition, "Entry", shape.triangleup, location.belowbar, color.blue, size=size.tiny)

// ✅ Good - Const string only
plotshape(entryCondition, "Entry", shape.triangleup, location.belowbar, color.blue, text="ENTRY")
```

#### Table Cell Parameter Issues
**Error**: `table.cell` parameter not supported

**Problem**: Using unsupported parameters like `colspan`
```pinescript
// ❌ Bad - colspan not supported
table.cell(systemTable, 0, 0, "JON SYSTEM", colspan=2)
```

**Solution**: Use separate cells instead of colspan
```pinescript
// ✅ Good - Use separate header cells
table.cell(systemTable, 0, 0, "JON SYSTEM", text_color=color.white)
table.cell(systemTable, 1, 0, "", text_color=color.white)
```

#### Variable Scope Issues
**Error**: Undefined variable or function call in conditional scope

**Problem**: Defining variables or calling functions inside conditionals that are used globally
```pinescript
// ❌ Bad - Variable defined in conditional scope
if enableSomeFeature
    smaValue = ta.sma(close, 200)
plot(smaValue) // Error: smaValue may be undefined
```

**Solution**: Define variables at global scope, calculate conditionally
```pinescript
// ✅ Good - Variable defined globally
smaValue = enableSomeFeature ? ta.sma(close, 200) : na
plot(smaValue)
```

#### Variable Declaration Order
**Error**: "Undeclared identifier" when variables are used before declaration

**Problem**: Variables referenced in validation or calculations before they're declared
```pinescript
// ❌ Bad - monthlyDonchianHigh used before declaration
isDataValid = not na(monthlyDonchianHigh) and monthlyDonchianHigh > 0
// ... later in code ...
monthlyDonchianHigh = request.security(syminfo.tickerid, "1M", ta.highest(high, 55))
```

**Solution**: Declare variables before any usage
```pinescript
// ✅ Good - Declare before use
monthlyDonchianHigh = request.security(syminfo.tickerid, "1M", ta.highest(high, 55))
// ... later in code ...
isDataValid = not na(monthlyDonchianHigh) and monthlyDonchianHigh > 0
```

#### Local Scope Function Restrictions
**Error**: "Cannot use plotshape in local scope"

**Problem**: Using plot functions inside conditional blocks or function scope
```pinescript
// ❌ Bad - plotshape in local scope
if exitCondition
    plotshape(true, "Exit", shape.triangledown, location.abovebar, color.orange)
```

**Solution**: Move plot functions to global scope with condition variables
```pinescript
// ✅ Good - plotshape at global scope
exitCondition = showTradeLabels and strategy.position_size == 0 and strategy.position_size[1] > 0
plotshape(exitCondition, "Exit", shape.triangledown, location.abovebar, color.orange)
```

#### Long Line Indentation Errors
**Error**: Syntax errors on indented long lines

**Problem**: Multi-line statements with indentation cause Pine Script compilation failure
```pinescript
// ❌ Bad - Indented continuation lines fail
if condition
    log.info("Long message: " + var1 + 
            " | More: " + var2)  // This fails!
```

**Solution**: Long lines must start at column 0, no indentation allowed
```pinescript
// ✅ Good - No indentation on long lines
if condition
log.info("Long message: " + var1 + " | More: " + var2)  // Starts at column 0
```

#### Line Continuation Errors
**Error**: Syntax error in multi-line expressions

**Problem**: Missing backslash (`\`) for line continuation in complex expressions
```pinescript
// ❌ Bad - Missing line continuation
longCondition = isTrendBullish and 
                isSignalValid and
                riskAcceptable
```

**Solution**: Add backslash at end of each line (except last)
```pinescript
// ✅ Good - Proper line continuation
longCondition = isTrendBullish and \
                isSignalValid and \
                riskAcceptable
```

### UI/Display Errors

#### Label Text Conflicts
**Error**: Label text parameter issues with dynamic content

**Problem**: Labels with dynamic text content causing compilation issues
```pinescript
// ❌ Potential issue - Complex dynamic text
dynamicText = "Entry: " + str.tostring(close) + " Stop: " + str.tostring(stopPrice)
label.new(bar_index, high, dynamicText)
```

**Solution**: Simplify text or use coded labels
```pinescript
// ✅ Good - Simple coded text
exitCode = exitReason == "STOP LOSS" ? "T1-SL" : "T1-F4"
label.new(bar_index, high, exitCode, style=label.style_label_down)
```

#### Background Color Conflicts
**Error**: Multiple bgcolor() calls causing overlap

**Problem**: Multiple background colors applied simultaneously
```pinescript
// ❌ Potential issue - Color conflicts
bgcolor(profitZone ? color.green : na)
bgcolor(riskZone ? color.red : na)
bgcolor(neutralZone ? color.gray : na)
```

**Solution**: Use conditional logic to prioritize colors
```pinescript
// ✅ Good - Single bgcolor with priority logic
zoneColor = profitZone ? color.new(color.green, 95) : 
            riskZone ? color.new(color.red, 95) : 
            neutralZone ? color.new(color.gray, 98) : na
bgcolor(zoneColor)
```

### Best Practices to Prevent Errors

1. **Always use global scope for variables used in plots**
2. **Avoid parameter duplication in functions**
3. **Use proper line continuation with backslashes**
4. **Test UI elements incrementally**
5. **Keep text parameters simple and static when possible**
6. **Use consistent naming conventions**
7. **Validate all external data before use**
8. **Comment complex conditional logic clearly**

### Error Prevention Checklist

- [ ] All plot functions have unique parameter names
- [ ] Variables used in plots are defined at global scope
- [ ] Variables are declared before any usage/reference
- [ ] Plot functions (plotshape, plot, etc.) are at global scope only
- [ ] Long lines start at column 0 (no indentation on continuation lines)
- [ ] Line continuations use proper backslash syntax
- [ ] Table parameters are supported in Pine Script v6
- [ ] Label text is simplified and coded
- [ ] Background colors have proper priority logic
- [ ] All external data is validated before use
- [ ] Function parameters match documentation exactly
- [ ] Global variables use `var` declaration when state persistence is needed
