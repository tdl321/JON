---
description: 
globs: 
alwaysApply: false
---
# JON Development Task Breakdown

## Development Philosophy
This task breakdown implements the **"robustness over optimization"** philosophy from the [JON PRD](mdc:.cursor/rules/prd.mdc) at the development level. Each phase is designed to be:
- **Self-contained** with clear dependencies
- **Testable** in isolation before moving forward
- **Aligned** with the [5-step development protocol](mdc:.cursor/rules/jon-development-protocol.mdc)

## Phase-Based Implementation Strategy

### üîß **Phase 0: Foundation Debugging & Parameter Validation**
**Goal**: Establish parameter-driven development framework and fix critical implementation bugs
**Status**: CURRENT ACTIVE PHASE

#### **Mission Context**:
Create a separation of concerns between **parameter experimentation** (TradingView Settings UI) and **implementation execution** (Pine Script code). This enables rapid strategy optimization through UI controls without ever needing to edit code again.

#### **Parameter-Driven Development Framework**:
- **üéõÔ∏è Experimentation Layer**: TradingView settings interface for parameter testing
- **‚öôÔ∏è Implementation Layer**: Bug-free Pine Script execution engine
- **üìã Validation Layer**: Systematic parameter reference and debugging protocols

#### Tasks:
- **0.1 Documentation Framework**: 
  - ‚úÖ Parameter reference system ([jon-parameters.mdc](mdc:.cursor/rules/jon-parameters.mdc))
  - ‚úÖ Debugging protocol ([jon-debugging.mdc](mdc:.cursor/rules/jon-debugging.mdc))
  - ‚úÖ Issue tracking and validation processes

- **0.2 Critical Bug Fixes**: Fix implementation issues without touching parameters
  - **Issue #1**: Missing `if trailStartActivated` block in exit strategy (CRITICAL)
  - **Issue #2**: Table UI display errors and na value handling
  - **Issue #3**: Missed trade signals in entry detection logic
  - **Issue #4**: Variable scope problems with var declarations
  - **Issue #5**: Monthly data request issues with lookahead bias

- **0.3 Parameter Compliance Validation**: Ensure implementation matches parameter intent
  - F-4 Exit Strategy: Trailing must respect `trailStartProfitMultiplier = 5.0`
  - F-2/F-3 Entry Logic: Monthly timeframes and age requirements must be exact
  - R-1/R-2 Risk Management: All correlation features must function per boolean settings
  - UI Settings: All parameters must be properly referenced, no hardcoded values

#### **Validation Checkpoint**:
- [ ] All critical bugs fixed and implementation respects parameter specifications
- [ ] Pine Script compiles without errors in TradingView
- [ ] UI displays correctly with proper na value handling
- [ ] Debug mode reveals correct signal detection logic
- [ ] Entry/exit timing matches parameter-defined criteria
- [ ] All parameter variables are properly referenced (zero hardcoded values)
- [ ] Implementation ready for future TradingView settings UI integration

#### **Parameter Reference Validation Process**:
Every fix must validate against [jon-parameters.mdc](mdc:.cursor/rules/jon-parameters.mdc):
1. **Reference Parameter Intent**: What should this parameter do?
2. **Validate Implementation**: Does the code honor the parameter specification?
3. **Cross-Check Constraints**: Are ranges, types, and defaults respected?
4. **Document Validation**: Log the parameter compliance in debugging notes

#### **Future Settings UI Benefits** (Implementation Goal):
Once Phase 0 is complete, users will be able to optimize strategy through TradingView settings:
- üéõÔ∏è **Risk per unit adjustments** (0.1% - 2.0% range)
- üîò **Toggle correlation features** (boolean checkboxes)
- üìä **Fine-tune ATR multipliers** (0.5 - 10.0 range with 0.1 steps)
- ‚è±Ô∏è **Modify timeframes and age requirements** within validated ranges
- üéØ **Enable/disable entry methods** without code changes

#### **Success Criteria for Phase 0**:
- ‚úÖ **Zero Implementation Bugs**: All execution logic works flawlessly
- ‚úÖ **Parameter Compliance**: Every calculation uses parameter variables correctly
- ‚úÖ **Future-Ready Structure**: TradingView settings integration ready
- ‚úÖ **Professional Separation**: Parameter research vs execution infrastructure

#### References:
- Parameter Specs: [JON Master Parameter Reference](mdc:.cursor/rules/jon-parameters.mdc)
- Debug Protocol: [JON Debugging & Error Tracking](mdc:.cursor/rules/jon-debugging.mdc)
- Standards: [Pine Script Standards](mdc:.cursor/rules/pine-script-standards.mdc)

---

### üèóÔ∏è **Phase 1: Foundation Infrastructure**
**Goal**: Establish robust Pine Script foundation before any trading logic
**Dependencies**: Phase 0 complete

#### Tasks:
- **1.1 Project Setup**: Pine Script v5 strategy template with proper headers
- **1.2 Input System**: Comprehensive parameter framework following [Pine Script standards](mdc:.cursor/rules/pine-script-standards.mdc)
- **1.3 Core Indicators**: Calculate SMA(200), ATR, and reference asset data with validation

#### Validation Checkpoint:
- [ ] Script compiles without errors in TradingView
- [ ] All input parameters display correctly with validation
- [ ] Core indicators calculate and plot properly on chart
- [ ] No performance warnings or data issues

#### References:
- Requirements: [Strategy Requirements F-1, R-1](mdc:.cursor/rules/strategy-requirements.mdc)
- Standards: [Pine Script Security & Performance](mdc:.cursor/rules/pine-script-standards.mdc)

---

### üéØ **Phase 2: Core Strategy Logic**
**Goal**: Implement fundamental trend filtering and signal detection
**Dependencies**: Phase 1 complete

#### Tasks:
- **2.1 Trend Filter (F-1)**: 200 SMA trend filter with optional reference asset
- **2.2 Signal Detection Engine**: Recent high/low identification system
- **2.3 Entry Framework**: Basic entry condition structure (no execution yet)

#### Validation Checkpoint:
- [ ] Trend filter correctly identifies bull/bear periods on historical data
- [ ] High/low detection matches manual chart analysis
- [ ] Entry signals generate at correct times (log only, no trades)
- [ ] Logic tested on 2020 crash period shows proper bear market avoidance

#### References:
- Requirements: [Strategy Requirements F-1, F-2, F-3](mdc:.cursor/rules/strategy-requirements.mdc)
- Protocol: [Development Protocol Step 4](mdc:.cursor/rules/jon-development-protocol.mdc)

---

### ‚öñÔ∏è **Phase 3: Risk Management Foundation**
**Goal**: Implement non-negotiable risk controls before any trade execution
**Dependencies**: Phase 2 complete

#### Tasks:
- **3.1 Position Sizing (R-1)**: ATR-based position size calculation
- **3.2 Stop Loss System (R-2)**: Hard stop placement and management
- **3.3 Risk Validation**: Defensive logic and edge case handling

#### Validation Checkpoint:
- [ ] Position sizing formula produces reasonable sizes across different ATR values
- [ ] Stop losses place correctly N*ATR below entry price
- [ ] No division by zero or invalid size errors under any conditions
- [ ] Risk per trade never exceeds user-defined percentage

#### References:
- Requirements: [Strategy Requirements R-1, R-2](mdc:.cursor/rules/strategy-requirements.mdc)
- Standards: [Pine Script Error Prevention](mdc:.cursor/rules/pine-script-standards.mdc)

---

### üö™ **Phase 4: Exit Strategy System**
**Goal**: Implement configurable exit strategies before full trade execution
**Dependencies**: Phase 3 complete

#### Tasks:
- **4.1 ATR Trailing Exit**: Dynamic trailing stop for trending assets
- **4.2 Aggressive Profit Take**: Fixed target system for mean-reverting assets
- **4.3 Exit Selection (F-4)**: User-configurable exit mode switching

#### Validation Checkpoint:
- [ ] ATR trailing stops lock in profits during trends without premature exits
- [ ] Aggressive profit takes capture quick moves on indices effectively
- [ ] Exit mode selection works seamlessly for different asset types
- [ ] Backtests on BTC (ATR trail) vs NDX (aggressive) show appropriate behavior

#### References:
- Requirements: [Strategy Requirements F-4](mdc:.cursor/rules/strategy-requirements.mdc)
- Validation: [Backtest Standards](mdc:.cursor/rules/backtest-validation.mdc)

---

### üé≤ **Phase 5: Entry Logic Integration**
**Goal**: Implement and integrate both entry triggers with full trade execution
**Dependencies**: Phase 4 complete

#### Tasks:
- **5.1 Breakout Entry (F-2)**: Entry above recent highs with confirmations
- **5.2 Dip Buy Entry (F-3)**: Entry after retest and recovery
- **5.3 Opportunistic Exits (F-5)**: Failed breakout detection and exit

#### Validation Checkpoint:
- [ ] Breakout entries occur only on valid trend-confirmed signals
- [ ] Dip buy entries avoid catching falling knives in bear markets
- [ ] Opportunistic exits prevent holding weak breakout positions
- [ ] Full integration maintains all risk management from Phase 3

#### References:
- Requirements: [Strategy Requirements F-2, F-3, F-5](mdc:.cursor/rules/strategy-requirements.mdc)
- Testing: [Historical Crisis Testing](mdc:.cursor/rules/backtest-validation.mdc)

---

### üìä **Phase 6: Interface & Validation**
**Goal**: Complete user interface and comprehensive system validation
**Dependencies**: Phase 5 complete

#### Tasks:
- **6.1 Visual Interface (UI-1)**: On-chart signals and information display
- **6.2 Strategy Tester (UI-2)**: Performance reporting and benchmark comparison
- **6.3 Multi-Asset Validation (B-1)**: Test across BTCUSD, NDX/QQQ, XAUUSD

#### Validation Checkpoint:
- [ ] All visual elements display correctly and provide clear trading information
- [ ] Strategy tester shows performance vs buy & hold benchmark
- [ ] Strategy outperforms buy & hold on risk-adjusted basis for all three primary assets
- [ ] Performance during historical crashes meets [PRD criteria](mdc:.cursor/rules/prd.mdc)

#### References:
- Requirements: [Strategy Requirements UI-1, UI-2](mdc:.cursor/rules/strategy-requirements.mdc)
- Validation: [Complete Backtest Procedures](mdc:.cursor/rules/backtest-validation.mdc)

---

## Development Guidelines

### Between Each Phase:
1. **Follow Protocol**: Complete all [5-step development protocol](mdc:.cursor/rules/jon-development-protocol.mdc) steps
2. **Code Review**: Ensure [Pine Script standards](mdc:.cursor/rules/pine-script-standards.mdc) compliance
3. **Git Commit**: Commit working phase before proceeding
4. **Documentation**: Update implementation notes and findings

### When Stuck:
- Review [PRD requirements](mdc:.cursor/rules/prd.mdc) for original intent
- Check [strategy requirements](mdc:.cursor/rules/strategy-requirements.mdc) for specific criteria
- Apply [backtest validation](mdc:.cursor/rules/backtest-validation.mdc) to verify approach

### Success Metrics:
Each completed phase should move closer to the [PRD's core philosophy](mdc:.cursor/rules/prd.mdc):
- **Automate Everything**: No manual intervention required
- **Robustness over Optimization**: Works across multiple assets and market conditions
- **Sidestep Bear Markets**: Preserves capital during major downturns
- **Low-Frequency Investing**: High-quality signals, not overtrading

# JON Trading Strategy - Current Implementation Status

## üìã **ACTIVE PHASE: Phase 0.3 - Donchian Channel Integration**

### **Current Task: Replace Manual High/Low Analysis with Turtle Donchian Channels**

**Status**: ‚úÖ Parameters Added, üîÑ Implementation In Progress  
**Objective**: Enhance the Top-Down dual-system architecture with proven Turtle Donchian channel methodology for cleaner breakout/recovery detection

---

## üéØ **Phase 0.3 Implementation Details**

### **‚úÖ COMPLETED:**
1. **Top-Down Infrastructure Built**:
   - Monthly Context Layer (Strategic): Trend bias, key level validation
   - Daily Execution Layer (Tactical): Clean breakout/recovery signals
   - Priority hierarchy: VOL@MTH > DAY+MTH > MTH_ONLY > DAY_ONLY

2. **Donchian Parameters Added**:
   - `monthlyDonchianPeriod` (55) - Classic Turtle long-term channel
   - `dailyDonchianPeriod` (20) - Classic Turtle short-term channel  
   - `requireCleanBreakout` (true) - Must close outside channel
   - `breakoutConfirmationBars` (2) - Bars outside for confirmation
   - Equivalent dip buy parameters for recovery detection

### **üîÑ IN PROGRESS:**
**Replace Current Signal Detection Logic with Donchian Channels**

#### **A. Monthly Context Layer Enhancement:**
```pinescript
// Replace manual monthly high/low tracking with:
monthlyDonchianUpper = request.security(syminfo.tickerid, breakoutTimeframe, ta.highest(high, monthlyDonchianPeriod))
monthlyDonchianLower = request.security(syminfo.tickerid, dipBuyTimeframe, ta.lowest(low, monthlyDipDonchianPeriod))
```

#### **B. Daily Execution Layer Enhancement:**
```pinescript
// Replace ta.highest/ta.lowest with:
dailyDonchianUpper = ta.highest(high, dailyDonchianPeriod)
dailyDonchianLower = ta.lowest(low, dailyDipDonchianPeriod)
```

#### **C. Enhanced Signal Logic:**
1. **Breakout Detection**: 
   - Clean channel breakout (close above upper channel)
   - Confirmation bars requirement
   - Volume spike enhancement at channel breaks

2. **Dip Recovery Detection**:
   - Touch lower channel + clean recovery (close above lower channel)
   - Recovery confirmation bars
   - Monthly context alignment

#### **D. Top-Down Integration:**
- **Priority 1**: Volume spike + Donchian breakout at monthly level
- **Priority 2**: Daily Donchian signal + Monthly Donchian context
- **Priority 3**: Monthly Donchian signal only
- **Priority 4**: Daily Donchian signal with strong momentum

---

## üîß **Implementation Requirements**

### **Signal Detection Replacement:**
1. **Remove**: Manual age tracking, manual high/low calculations
2. **Replace**: With Donchian channel breakout/recovery logic
3. **Enhance**: Volume spike validation at channel levels
4. **Maintain**: All existing parameter validation and Top-Down hierarchy

### **Key Benefits Expected:**
- **Cleaner signals**: Automatic false breakout filtering
- **Proven methodology**: Classic Turtle robustness
- **Reduced complexity**: No manual age/level tracking
- **Enhanced filtering**: Channel + volume + monthly context

### **Testing Framework:**
- All parameters remain flexible for optimization
- Side-by-side comparison with previous logic possible
- Debug indicators updated for Donchian levels
- UI table enhanced with channel status

---

## üìä **Current File Status**

**jon_strategy.pine**: 
- ‚úÖ Top-Down infrastructure complete
- ‚úÖ Donchian parameters added  
- üîÑ Signal detection logic needs Donchian implementation
- üîÑ Debug indicators need channel level plots
- üîÑ UI table needs channel status updates

**Estimated Implementation**: ~1-2 hours for complete Donchian integration

---

## üéØ **Next Context Window Goals**

1. **Implement Donchian calculations** for both monthly and daily timeframes
2. **Replace signal detection logic** with channel-based methodology  
3. **Update debug indicators** to show Donchian levels
4. **Enhance UI table** with channel breakout status
5. **Test and validate** signal improvements

**Philosophy**: Maintain parameter flexibility while implementing proven Turtle methodology for maximum robustness across timeframes and assets.
