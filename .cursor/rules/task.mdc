---
description: 
globs: 
alwaysApply: false
---
# JON Development Task Breakdown

## Development Philosophy
This task breakdown implements the **"robustness over optimization"** philosophy from the [JON PRD](mdc:.cursor/rules/prd.mdc) at the development level. Each phase is designed to be:
- **Self-contained** with clear dependencies
- **Testable** in isolation before moving forward
- **Aligned** with the [5-step development protocol](mdc:.cursor/rules/jon-development-protocol.mdc)

## Phase-Based Implementation Strategy

### üèóÔ∏è **Phase 1: Foundation Infrastructure**
**Goal**: Establish robust Pine Script foundation before any trading logic

#### Tasks:
- **1.1 Project Setup**: Pine Script v5 strategy template with proper headers
- **1.2 Input System**: Comprehensive parameter framework following [Pine Script standards](mdc:.cursor/rules/pine-script-standards.mdc)
- **1.3 Core Indicators**: Calculate SMA(200), ATR, and reference asset data with validation

#### Validation Checkpoint:
- [ ] Script compiles without errors in TradingView
- [ ] All input parameters display correctly with validation
- [ ] Core indicators calculate and plot properly on chart
- [ ] No performance warnings or data issues

#### References:
- Requirements: [Strategy Requirements F-1, R-1](mdc:.cursor/rules/strategy-requirements.mdc)
- Standards: [Pine Script Security & Performance](mdc:.cursor/rules/pine-script-standards.mdc)

---

### üéØ **Phase 2: Core Strategy Logic**
**Goal**: Implement fundamental trend filtering and signal detection
**Dependencies**: Phase 1 complete

#### Tasks:
- **2.1 Trend Filter (F-1)**: 200 SMA trend filter with optional reference asset
- **2.2 Signal Detection Engine**: Recent high/low identification system
- **2.3 Entry Framework**: Basic entry condition structure (no execution yet)

#### Validation Checkpoint:
- [ ] Trend filter correctly identifies bull/bear periods on historical data
- [ ] High/low detection matches manual chart analysis
- [ ] Entry signals generate at correct times (log only, no trades)
- [ ] Logic tested on 2020 crash period shows proper bear market avoidance

#### References:
- Requirements: [Strategy Requirements F-1, F-2, F-3](mdc:.cursor/rules/strategy-requirements.mdc)
- Protocol: [Development Protocol Step 4](mdc:.cursor/rules/jon-development-protocol.mdc)

---

### ‚öñÔ∏è **Phase 3: Risk Management Foundation**
**Goal**: Implement non-negotiable risk controls before any trade execution
**Dependencies**: Phase 2 complete

#### Tasks:
- **3.1 Position Sizing (R-1)**: ATR-based position size calculation
- **3.2 Stop Loss System (R-2)**: Hard stop placement and management
- **3.3 Risk Validation**: Defensive logic and edge case handling

#### Validation Checkpoint:
- [ ] Position sizing formula produces reasonable sizes across different ATR values
- [ ] Stop losses place correctly N*ATR below entry price
- [ ] No division by zero or invalid size errors under any conditions
- [ ] Risk per trade never exceeds user-defined percentage

#### References:
- Requirements: [Strategy Requirements R-1, R-2](mdc:.cursor/rules/strategy-requirements.mdc)
- Standards: [Pine Script Error Prevention](mdc:.cursor/rules/pine-script-standards.mdc)

---

### üö™ **Phase 4: Exit Strategy System**
**Goal**: Implement configurable exit strategies before full trade execution
**Dependencies**: Phase 3 complete

#### Tasks:
- **4.1 ATR Trailing Exit**: Dynamic trailing stop for trending assets
- **4.2 Aggressive Profit Take**: Fixed target system for mean-reverting assets
- **4.3 Exit Selection (F-4)**: User-configurable exit mode switching

#### Validation Checkpoint:
- [ ] ATR trailing stops lock in profits during trends without premature exits
- [ ] Aggressive profit takes capture quick moves on indices effectively
- [ ] Exit mode selection works seamlessly for different asset types
- [ ] Backtests on BTC (ATR trail) vs NDX (aggressive) show appropriate behavior

#### References:
- Requirements: [Strategy Requirements F-4](mdc:.cursor/rules/strategy-requirements.mdc)
- Validation: [Backtest Standards](mdc:.cursor/rules/backtest-validation.mdc)

---

### üé≤ **Phase 5: Entry Logic Integration**
**Goal**: Implement and integrate both entry triggers with full trade execution
**Dependencies**: Phase 4 complete

#### Tasks:
- **5.1 Breakout Entry (F-2)**: Entry above recent highs with confirmations
- **5.2 Dip Buy Entry (F-3)**: Entry after retest and recovery
- **5.3 Opportunistic Exits (F-5)**: Failed breakout detection and exit

#### Validation Checkpoint:
- [ ] Breakout entries occur only on valid trend-confirmed signals
- [ ] Dip buy entries avoid catching falling knives in bear markets
- [ ] Opportunistic exits prevent holding weak breakout positions
- [ ] Full integration maintains all risk management from Phase 3

#### References:
- Requirements: [Strategy Requirements F-2, F-3, F-5](mdc:.cursor/rules/strategy-requirements.mdc)
- Testing: [Historical Crisis Testing](mdc:.cursor/rules/backtest-validation.mdc)

---

### üìä **Phase 6: Interface & Validation**
**Goal**: Complete user interface and comprehensive system validation
**Dependencies**: Phase 5 complete

#### Tasks:
- **6.1 Visual Interface (UI-1)**: On-chart signals and information display
- **6.2 Strategy Tester (UI-2)**: Performance reporting and benchmark comparison
- **6.3 Multi-Asset Validation (B-1)**: Test across BTCUSD, NDX/QQQ, XAUUSD

#### Validation Checkpoint:
- [ ] All visual elements display correctly and provide clear trading information
- [ ] Strategy tester shows performance vs buy & hold benchmark
- [ ] Strategy outperforms buy & hold on risk-adjusted basis for all three primary assets
- [ ] Performance during historical crashes meets [PRD criteria](mdc:.cursor/rules/prd.mdc)

#### References:
- Requirements: [Strategy Requirements UI-1, UI-2](mdc:.cursor/rules/strategy-requirements.mdc)
- Validation: [Complete Backtest Procedures](mdc:.cursor/rules/backtest-validation.mdc)

---

## Development Guidelines

### Between Each Phase:
1. **Follow Protocol**: Complete all [5-step development protocol](mdc:.cursor/rules/jon-development-protocol.mdc) steps
2. **Code Review**: Ensure [Pine Script standards](mdc:.cursor/rules/pine-script-standards.mdc) compliance
3. **Git Commit**: Commit working phase before proceeding
4. **Documentation**: Update implementation notes and findings

### When Stuck:
- Review [PRD requirements](mdc:.cursor/rules/prd.mdc) for original intent
- Check [strategy requirements](mdc:.cursor/rules/strategy-requirements.mdc) for specific criteria
- Apply [backtest validation](mdc:.cursor/rules/backtest-validation.mdc) to verify approach

### Success Metrics:
Each completed phase should move closer to the [PRD's core philosophy](mdc:.cursor/rules/prd.mdc):
- **Automate Everything**: No manual intervention required
- **Robustness over Optimization**: Works across multiple assets and market conditions
- **Sidestep Bear Markets**: Preserves capital during major downturns
- **Low-Frequency Investing**: High-quality signals, not overtrading
